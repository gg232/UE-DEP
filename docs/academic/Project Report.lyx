#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass report
\begin_preamble
\pagenumbering{roman}
\usepackage{tocbibind}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 5
\tocdepth 5
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Project Report
\end_layout

\begin_layout Author
Gerard Gallagher
\end_layout

\begin_layout Date
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Abstract
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
phantomsection % required if using hyperref 
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{
\backslash
abstractname} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
[insert abstract here]
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Project Objectives
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pagenumbering{arabic} 
\end_layout

\begin_layout Plain Layout


\backslash
setcounter{page}{1}
\end_layout

\end_inset

This project will implement a digital effect pedal capable of loading and
 utilizing one or more user-supplied digital effects in the form of VST
 plugins.
 The main objective of this project is to produce a playable guitar effect
 pedal where the user can supply effects in the form of digital audio plugins.
 Previous attempts at such a pedal have been oriented towards lo-fi enthusiasts
 and DSP students who are comfortable coding their effects or significant
 portions of their system by hand.
 My design will attempt to make the approach as painless as possible for
 musicians and non-engineers, while retaining such “hackability” under the
 hood for audio engineers and DSP students.
 
\end_layout

\begin_layout Chapter
Technical Approach
\end_layout

\begin_layout Standard
The approach will be to use a Raspberry Pi 4 as a DSP unit, where the DSP
 algorithm is effectively specified and possibly modulated by the user 
\end_layout

\begin_layout Standard
Although the algorithms used by the user are in general (almost invariably)
 nonlinear, the device needs to be as linear as possible within its operating
 range.
 Colloquially, this translates to the requirement that the device imparts
 “no color of its own” upon audio signals.
 
\end_layout

\begin_layout Standard
I have decided to move input and output sampling frequencies to 44.1kHz because
 it is plausible that the user might want to pitch-shift their performance
 by up to a few octaves, so a sample rate that can cover the entire audible
 frequency spectrum is required.
 The Raspberry Pi’s I2S hardware will provide the audio clock, and because
 it is generated by the Pi, it is controlled by the Pi and can be set through
 software.
 The ADC and DAC can both handle frequencies as low as 8kHz and as high
 as 384kHz, so I’ll make sure to try them during the testing phase, but
 preliminary tests have shown that the Raspberry Pi 4B can handle processing
 several effects (albeit from a USB audio interface) with a sample frequency
 of 44.1kHz.
\end_layout

\begin_layout Standard
Except for the RF filter on the input, all other filters will be active.
 The RF filter will be a simple RC passive filter designed to block RF interfere
nce.
 At the input, all audio input signals will go through a high-pass centered
 below 20Hz to kill DC from input sources and remove garbage (unwanted signal
 energy) from below the threshold of audibility.
 The output will have an anti-imaging low-pass filter with an output impedance
 similar to those exhibited by other guitar pedals.
 There will not be an audio high-pass at this stage.
 
\end_layout

\begin_layout Standard
I admittedly spent far too long obsessing over filter types and transfer
 functions to conclude that, because of the modern sigma-delta ADC and DAC
 architectures that naturally oversample the signal, the required specifications
 for the anti-aliasing filter are rather generous towards the designer.
 Even a competently designed passive RC filter would suffice.
\end_layout

\begin_layout Standard
The preamp will be adjustable for the user by a potentiometer mounted to
 the exterior of the device.
 Although most electric instruments have a volume knob, I would like to
 give the user the ability to specify the gain needed (by ear + clipping
 LED) when the instrument’s volume knob is at maximum gain, so that they
 can set the headroom of the preamp-ADC combo to suit their playing style
 and particular instrument.
 
\end_layout

\begin_layout Standard
I have used the terminology “flat” several times without further specification.
 This will now be done.
 In signals and systems, a flat frequency response is one where the frequency
 response is constant up to infinity, and the phase response is perfectly
 linear up to infinity .
 This is impossible to build, but even if we allow for responses that are
 flat only in the passband, this is still a stringent specification for
 my system to respond to.
 The frequency response is known to affect the tonal quality of a sound,
 and it is through the idea of “balancing frequencies” that filtering is
 taught to audio engineers in recording schools.
 However, the subject of the audibility of phase response is controversial
 and steeped in misinformation.
 Basically, “reasonable” amounts of phase distortion are not audible when
 applied to regular music in typical settings.
 It can be heard if applied to sufficiently chosen test signals, and in
 anechoic chambers.
 The seminal paper on the issue, "On the Audibility of Midrange Phase Distortion
 in Audio Systems" by Lipshitz, et.
 al.
 , states the following four findings (emphasis is mine):
\end_layout

\begin_layout Enumerate
Even quite small midrange phase nonlinearities can be audible on suitably
 chosen signals.
 
\end_layout

\begin_layout Enumerate
Audibility is far greater on headphones than on loudspeakers.
\end_layout

\begin_layout Enumerate
Simple acoustic signals generated anechoically display clear phase audibility
 on headphones.
\end_layout

\begin_layout Enumerate
On normal music or speech signals phase distortion appears not to be generally
 audible, although it was heard with 99% confidence on some recorded vocal
 material.
\end_layout

\begin_layout Standard
The focus of my design is guitar signals.
 Although it is plausible that a user might plug a microphone into my design,
 vocal performances are not the focus of the project, and there already
 exist several better-adapted units for vocalists.
 To be more quantitative about this, I cite the following graph published
 as part of the study by Hansen and Madsen:
\end_layout

\begin_layout Standard
[insert image here]
\end_layout

\begin_layout Standard
Predictably, the tolerance for phase distortion is lowest around the audio
 midrange, where human voices are center, and increases with frequency.
 As amplitude level increases, the tolerance also decreases across the board,
 but still seems to approach 30 degrees at some point in the audible band
 as frequencies fall to zero or rise to 20kHz.
 A caveat of this study is that it was conducted at “reasonable” levels,
 and guitar amplifiers are invariably “unreasonably loud,” specifically
 much louder than the levels participants were subjected to in this study.
 Additionally, it was tested with sine waves.
 
\end_layout

\begin_layout Standard
The short version of the above is that phase distortion should be kept low,
 but a little bit towards the limits of the audible band is acceptable.
 Specifically, if I keep it under about 5 degrees, then it should be unnoticeabl
e for all practical purposes.
 The more noticeable problem will be, in my view, the frequency response
 of my filters, which needs to be as flat as possible in the passband.
 
\end_layout

\begin_layout Standard
Fortunately, filters with flatness of either frequency or phase response
 in the passband is very much a solved problem.
 A Bessel filter has a maximally flat phase response in the passband, whereas
 a Butterworth filter has a maximally flat frequency response.
 The Bessel filter’s frequency response does attenuate the upper frequencies
 in the passband, whereas the Butterworth filter’s phase response does distort
 the phase in the upper frequencies of the passband.
 The Bessel filter’s frequency response and Butterworth filter’s phase response
 are both monotonic .
 For audio purposes, a monotonic roll-off is better than one that is not
 monotonic, because such filters sound more natural.
 The main problem with using the Bessel filter is that it has a slow stopband
 roll-off, and the roll-off can be audible in the passband for low-order
 filters.
 For the high-pass filter input, because phase distortion is more acceptable
 in the lowest extremes of the audible band, I will use a 2nd-order Butterworth
 transfer function.
 For the low-pass filter, I will use a 3rd-order Butterworth transfer function
 because of the previous reason, but more importantly to ensure that the
 filter attenuates any supersonic frequencies that could alias down into
 the audible band upon sampling.
 The output low-pass will be a higher-order Butterworth filter, because
 I would like to accommodate users who want to shift their sounds close
 to the threshold of audibility.
 
\end_layout

\begin_layout Standard
Because the filters are active filters with cutoffs separated by (far more
 than) an octave, it is permissible to design them independently and then
 cascade them, as opposed to designing a narrowband asymmetrical bandpass.
 I mulled over adding a notch at 60Hz to deal with ground hum, but decided
 against it for two reasons.
 Firstly, a digital notch could be trivially implemented by the user through
 an EQ plugin.
 Secondly, it is plausible that a guitarist might want to play notes near
 60Hz, and even a properly designed notch could intrude in that space.
 A better solution is a toggleable ground lift .
 As soon as possible in the signal chain.
\end_layout

\begin_layout Standard
Although active filters should theoretically commute, because one of my
 filters will also be an amplifier, and for impedance matching purposes,
 it is better to amplify a filtered signal.
 If the signal is amplified first, it has a higher chance of clipping the
 filter’s op-amp.
\end_layout

\begin_layout Standard
The gain stage will also have a limiter circuit before the first op-amp
 and an LED indicator that flashes when the signal clips.
 The single-ended ADC has a full-scale value of 3V, so all signals must
 lie between 0V and 3V, or else they will be (horribly) distorted by clipping
 off the peaks.
 My approach here will be to implement a hard limiter at 3V exactly, but
 to allow the actual op-amp some extra headroom.
 My reasoning is that, although we are taught in introductory circuit courses
 that op-amps are perfectly linear except for outside their ranges of saturation
, the truth of the matter is that they typically begin to gently saturate
 the signal for high inputs.
 Although “rail-to-rail” op-amps are available, ones that can run comfortably
 on 3V are expensive.
 A better solution will be to power the op-amps with 5V, then limit the
 output with a clipping circuit.
\end_layout

\begin_layout Standard
To that end, the filter op-amps will be [fix] op amps.
 These have a reasonably low equivalent input voltage noise of 0.8µVrms,
 a passable slew rate of 5V/µs , and can be operated as low as +-2V (or
 4V single ended).
 
\end_layout

\begin_layout Standard
Thus, the input block specs will be as follows: 
\end_layout

\begin_layout Itemize
Input RF (low pass) filter
\end_layout

\begin_deeper
\begin_layout Itemize
Transfer function = 1st order 
\end_layout

\begin_layout Itemize
Filter topology = passive RC 
\end_layout

\begin_layout Itemize
Cutoff = -3dB at 50kHz
\end_layout

\end_deeper
\begin_layout Itemize
Input High pass Filter 
\end_layout

\begin_deeper
\begin_layout Itemize
Input impedance = 5k Ohms 
\end_layout

\begin_layout Itemize
Output impedance = 5k ohms 
\end_layout

\begin_layout Itemize
Transfer function = 2nd order Butterworth 
\end_layout

\begin_layout Itemize
Filter topology = Sallen-and-Key 
\end_layout

\begin_layout Itemize
Cutoff = -6dB at 20kHz
\end_layout

\end_deeper
\begin_layout Itemize
Input Low pass Filter 
\end_layout

\begin_deeper
\begin_layout Itemize
Input impedance = 500k Ohms 
\end_layout

\begin_layout Itemize
Output impedance = 5k Ohms 
\end_layout

\begin_layout Itemize
Transfer function = 3rd-order Butterworth 
\end_layout

\begin_layout Itemize
Filter topology = 1-opamp “Sallen- Key” 
\end_layout

\begin_layout Itemize
Cutoff = -3dB at or slightly below 20 Hz
\end_layout

\end_deeper
\begin_layout Itemize
Preamp stage 
\end_layout

\begin_deeper
\begin_layout Itemize
Input impedance = 500k Ohms 
\end_layout

\begin_layout Itemize
Output impedance < (60k/10) Ohms 
\end_layout

\begin_layout Itemize
Gain range = 0-30dB 
\end_layout

\begin_layout Itemize
Amplifier topology = traditional non-inverting
\end_layout

\end_deeper
\begin_layout Itemize
Output High pass Filter 
\end_layout

\begin_deeper
\begin_layout Itemize
Input impedance < 100 ohms
\end_layout

\begin_layout Itemize
Output impedance ~ 5k ohms 
\end_layout

\begin_layout Itemize
Transfer function = 2nd order Butterworth 
\end_layout

\begin_layout Itemize
Filter topology = Sallen-Key 
\end_layout

\begin_layout Itemize
Cutoff = -6dB at 20kHz 
\end_layout

\end_deeper
\begin_layout Standard
The ADC will be a breakout board based on the Texas Instruments PCM1801.
 This IC is a single-ended sigma-delta ADC designed for cheap embedded audio
 applications.
 It requires both 5V power for the analog section, and 3.3V from the digital
 section.
 The input can swing between 0V and 3V max, with the stipulation that it
 is a single ended ADC, which means that all prior op-amp circuits need
 to be biased to output centered at 1.5VDC.
 Additionally, all op-amps prior to the ADC need to be “comfortable” working
 with a single-ended supply voltage of 5V and signals up to 3V.
 It outputs digital words in I2S or left-justified format.
 For this project, I will be using the I2S format.
\end_layout

\begin_layout Standard
The DAC will be a breakout board based on the Texas Instruments PCM5102A.
 This IC is a single-ended sigma-delta DAC designed for cheap embedded audio
 applications.
 Unlike the ADC, this one only needs 3.3V for both sections.
\end_layout

\begin_layout Standard
Both the ADC and DAC are stereo devices, meaning that there are actually
 two inputs and outputs.
 Stereo operation is unnecessary for most instruments.
 Guitar is inherently monophonic, although some guitar reverbs and ping-pong
 delay effects take advantage of stereo audio.
 In order for the input to be stereo, a user needs to use a stereo effect
 before going into my pedal.
 Although this is plausible, it would make a lot more sense to use my pedal
 to implement that effect.
 Stereo reverb plugins are a dime a dozen, as are ping-pong delays and any
 modulation effect, which stereo operation is often used for.
 Thus, the input will be sent to one of the ADC inputs, and the other will
 be left unconnected.
 On the other hand, the outputs will be sent as stereo outputs.
 Unfortunately, that means the low-pass filter and output gain control will
 have to be matched.
 C’est la vie.
\end_layout

\begin_layout Standard
After some closer reading of the Raspberry Pi’s specs, there is absolutely
 no way that a standard guitar pedal power supply will be sufficient to
 power the Raspberry Pi 4.
 These supplies, even the nicest ones, can typically only offer a few hundred
 mA of current.
 Keep in mind, the guitarist might want to drive other electronics on the
 pedalboard, such as a tuner, noise gate, or unique analog pedal for which
 no digital simulation exists.
 The Raspberry Pi 4 requires a whopping 3A of current, albeit at only 5V.
 Moving to a smaller model of Pi will not fix the problem.
 For comparison, the Electrosmash Pedal-Pi uses the Raspberry Pi Zero, which
 still requires 1A of current, and all other components essentially inherit
 all the power from the Raspberry Pi.
 Additionally, my understanding is that, according to Raspberry Pi documentation
, the safest way to power the device is through the USB port, which is a
 5V connection.
\end_layout

\begin_layout Standard
The system will be controlled primarily with the touchscreen, but secondarily
 through various knobs and switches external to the device.
 Right now, I have planned three digital knobs (rotary encoders), a footswitch
 toggle (separate from the bypass footswitch), an input for an expression
 pedal, and one sampled analog knob.
 Although designs vary wildly, to the point that there is not even a standard
 pinout, the basic principle of operation of an expression pedal is that
 a voltage is placed across a potentiometer operating as a voltage divider,
 whose action is controlled by the lever position.
 (There will also be at least an extra discrete resistor to limit the flow
 of current.) The Raspberry Pi will supply the input voltage and a MicroChip
 MCP3008 ADC (separate from the audio ADC) will convert the signal to SPI
 for the Raspberry Pi.
 This ADC is only 10 bits with a maximum of 200kHz sample frequency, although
 the limitations of SPI make such high rates impractical for the Pi.
 From experience, expression pedal outputs are nearly DC.
 If a user rocks the pedal back and forth 32 times in a second, that would
 yield a frequency of 32Hz, which allows for a Nyquist rate of 64Hz.
 Rounding up 100 Hz provides a guard band for aliasing.
 Note that this is a generous specification; a user who needs to oscillate
 the pedal will be better off doing so using software or an external MIDI
 CC pedal.
 The initial design will accommodate the pinout of a specific expression
 pedal, although the goal will be to implement a multi-position toggle switch
 that switches between the set of a few of the most common ones.
 
\end_layout

\begin_layout Standard
The touchscreen will be a Waveshare 4-Inch screen.
 The video output will be sent through HDMI, and control from the touch
 screen will be sent to the Pi via SPI.
 The touch screen requires both 3.3V power and 5V power.
\end_layout

\begin_layout Standard
My plan to distribute power is to, like the Pedal-Pi, use the on-board 3.3V
 and 5V pins to supply all the necessary power.
 Specifically, besides the nominal voltages, I need a 1.5V biasing voltage
 for all my op-amp filters.
 The Raspberry Pi’s 3.3V and 5V sources must also be filtered, as they are
 notoriously noisy.
 The USB port is used only for power, and cannot be used to access the device,
 so it seems feasible to simply present the USB port to the user on the
 outside of the case to plug into the power supply of their choosing.
 
\end_layout

\begin_layout Standard
The operating system will be the newest version of Raspberry Pi OS.
 Raspberry Pi OS is a derivative of Debian, which itself is a distribution
 of GNU/Linux.
 I will experiment with recompiling the OS with a modified real-time kernel,
 but if I cannot do so, the kernel will be the default.
 In general, music computers do not have real-time operating systems, even
 those at the highest-end studios, for the simple reason that Windows is
 not a real-time operating system.
 The average latency of Windows with a powerful enough CPU can be optimized
 nearly to zero, but it cannot be given an upper bound for 
\emph on
all
\emph default
 operations to finish.
 Practically, this means that Windows can choose not to prioritize the audio
 thread and allow it to miss a sample, which cerates clicks and pops that
 can damage speakers and the eardums of listeners.
 It is a bit difficult to quantify how powerful a CPU needs to be, but it
 depends heavily on the number and type of effects being processed.
 That being said, it has been possible for over a decade to play instruments
 through a typical office computer.
\end_layout

\begin_layout Standard
All versions of the GNU/Linux kernel include the ALSA (Advanced Linux Sound
 Architecture) API (application programming interface).
 When properly configured, it provides kernel-level support for sound devices
 to interact with software.
 It can interface with multiple input and output devices, as well as provide
 support for MIDI synthesis.
 To control and use inputs provided by ALSA, a JACK (JACK Audio Connection
 Kit) audio server must be started.
 It is from here that the user can set inputs and outputs, and where sample
 rate and bit depth can be controlled, if those bit depths are available.
 JACK is, from experience, indispensable for low-latency audio work.
 All that is left from here is the VST host.
 Several valid choices for VST host exist, and the one which I have chosen
 for now is the Carla audio plugin host.
 Carla is a free and open source modular plugin host.
 It can run plugins in VST format as well as those in the LADSPA, DSSI,
 LV2, AU, and JSFX formats.
 When supplied with the correct drivers, architecture emulation, and Windows
 API emulation, it can run VST plugins compiled on Windows and GNU/Linux,
 for x86 or x64 architectures.
 Specifically, a software called WINE (WINE Is Not an Emulator) is used
 to emulate Windows API calls.
 To use a Windows program on GNU/Linux, one typically installs the program
 through WINE, then runs it through WINE every time it needs to be used.
 The Raspberry Pi 4B uses a CPU with an ARM64 instruction set architecture.
 Consequently, x86 and x64 emulation is required.
 The software to provide this is Box86 and Box64, respectively.
\end_layout

\begin_layout Standard
Unfortunately, I have had some trouble in getting Carla to detect the Windows
 API emulation and processor architecture emulation currently installed
 on the Pi.
 Because there is a pre-compiled version of Carla for Windows, if all else
 fails, then I will simply install the Windows version onto the system through
 WINE.
 This technique would force the entire program through WINE, as opposed
 to specific components.
 The user would also lose compatibility for plugins compiled to run on GNU/Linux
 distributions.
 However, to the best of my knowledge, no VST plugins are exclusively designed
 for GNU/Linux.
 The only plugins that are native to GNU/Linux are really those that were
 designed early in the development of the operating system, where it was
 not yet feasible to run through compatibility layers.
 
\end_layout

\begin_layout Standard
Additionally, I am looking to modify the source code of Carla slightly to
 add in dedicated bypass switches.
 Right now, effects can be bypassed with MIDI CC inputs or by setting their
 respective “Wet” knob to zero, but in my view, there is nothing so helpful
 as a bypass switch.
 Additionally, I would like to see if it is feasible to implement my controls
 without sending MIDI CC inputs, which might somehow get sent to instruments
 further down the chain.
 Modifying the program is perfectly acceptable, as the program is licensed
 under GNU GPL-2.0 license.
 Basically, so long as the derivative work inherits the freedoms the license
 originally granted and states that it is modified, it is legal to copy,
 modify, and redistribute the file, possibly for money.
 (Any code I write or modify will be made freely available to the public
 the moment I think it is safe for another user to use.) 
\end_layout

\begin_layout Standard
I will also investigate the use of the Ardour DAW as a plugin host.
 The DAW is free-as-in-speech and open source.
 Ardour can host GNU/Linux compiled VST2 plugins, but with Carla embedded
 as a plugin, it can host all the plugins Carla can.
 Ardour is a fully featured digital audio workstation (DAW), and it is comparabl
e to REAPER or ProTools.
 For a guitarist, Carla on its own would be an easier solution with a shallower
 learning curve, but for a recording engineer who plays guitar, Ardour would
 offer the most flexibility.
 
\end_layout

\begin_layout Standard
To make turning on the pedal a “turn-key operation,” Raspberry Pi OS needs
 to be programmed to do several things upon startup.
 Firstly, ALSA needs to be set to take input from and send output to the
 Raspberry Pi’s I2S ports.
 Next, it would be helpful to boot into a desktop environment.
 This way, in case anything goes wrong, the user has a “friendlier” desktop
 environment from which they can either reboot or reopen closed programs.
 Next, a JACK server needs to be started that takes in I2S input and spits
 out I2S output.
 Finally, a plugin host such as Carla needs to be opened with settings that
 make sense.
 Most obviously, Carla needs to be pointed to the JACK server, but it might
 make sense to load in a default session where the input is sent directly
 to output with an “identity operator” plugin that does nothing to demonstrate
 to the user how to add in a plugin.
 What will likely happen is that I will set up a default project file for
 Carla to load that has all the desired settings and plausibly some (bypassed)
 plugins ready to be enabled.
 If Ardour is used, a default project file would also be set up so that
 a single track is “record enabled” and set to -0dB, feeding a master track
 also set at -0dB, which means that there will be no attenuation or processing
 in general on behalf of Ardour until the user adds some.
\end_layout

\begin_layout Standard
Include hardware block diagram with power sources - mandatory.
  
\end_layout

\begin_layout Standard
For the sake of readability, the power and bias wires have been colored.
 Specifically, 5V power is red, 3.3V power is green, and 1.5V bias for the
 op-amps are blue.
 Signal and control wires are black.
 For the rotary encoders, these will be completely separate GPIO inputs,
 but the diagram was getting cluttered.
 Basically, power will ultimately be handled by the Raspberry Pi 4, and
 the input and output op amps will need to be biased with +1.5VDC.
 Currently, the Pi uses a 5V 3A wall wart that plugs directly into the power
 supply USB port.
 
\end_layout

\begin_layout Chapter
Preliminary Work
\end_layout

\begin_layout Standard
The primary work was research into filter design and audio circuit idiosyncrasie
s that are not obvious and were not covered in depth in previous coursework.
 Most important is that op-amps do not act like ideal linear devices even
 for audio purposes, and that op-amp selection is one of the most important
 factors in how an audio design is going to work out.
 Specifically, finding low-power op amps that are not too noisy has been
 a challenge.
 
\end_layout

\begin_layout Standard
Besides that, the Raspberry Pi OS has been installed onto my Pi, and attempts
 were made to install the x86 and Windows compatibility software.
 
\end_layout

\begin_layout Standard
Additionally, I loaded a version of Carla onto my device from a binary compiled
 for “Debian”.
 It needs to be recompiled as support for a wide range of plugins is currently
 missing, likely due to dependency issues.
 As previously mentioned, I was able to get it to work with a small set
 of plugins.
 It was able to process a few JS plugins in cascade without noticeable latency.
 
\end_layout

\begin_layout Chapter
Components
\end_layout

\begin_layout Standard
Things I have 
\end_layout

\begin_layout Itemize
Raspberry Pi 4 Model B 
\end_layout

\begin_layout Itemize
ADCs (PCM1808 and MCP3008) 
\end_layout

\begin_layout Itemize
Resistors (1/4W and 1/2W, 0-1Mohm) 
\end_layout

\begin_layout Itemize
Electrolytic Capacitors Film 
\end_layout

\begin_layout Itemize
Capacitors Linear and audio-taper potentiometers and plastic knobs 
\end_layout

\begin_layout Itemize
Op amps 
\end_layout

\begin_layout Itemize
Touch screen
\end_layout

\begin_layout Itemize
M-Audio EX-P expression pedal 
\end_layout

\begin_layout Itemize
DAC (PCM5102) 
\end_layout

\begin_layout Itemize
XLR-1/4in combination jack
\end_layout

\begin_layout Standard
Things I need 
\end_layout

\begin_layout Itemize
Metal case 
\end_layout

\begin_layout Chapter
Updated Project Schedule
\end_layout

\begin_layout Standard
Assume Week 0 is that which starts on 01/17/2022 Task or 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Milestone
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Week
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Finalize design of input filters, input preamp, output post-amp, and output
 filter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Build input and output circuitry
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Implement touch screen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Finalize audio software
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Design and build control network, including software
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Design and build expression inputs 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Drill holes in case, place everything into the case
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Chapter
Test
\end_layout

\begin_layout Chapter
Test
\end_layout

\begin_layout Chapter
Test
\end_layout

\begin_layout Chapter
Test
\end_layout

\begin_layout Standard
stuff
\end_layout

\begin_layout Chapter*
\start_of_appendix
Appendices
\end_layout

\begin_layout Standard
The following appendices have been added to provide context for the project
 and to move details that some readers will not be interested in to the
 back.
 Some have been written to satisfy academic requirements, and some have
 been written to compile knowledge for later reference.
 
\end_layout

\begin_layout Chapter
Definitions and Acronyms
\end_layout

\begin_layout Standard
This appendix lists the definitions of jargon, what any acronyms or shorthand
 stand for, and any assumptions in their usage that apply to the entire
 document.
\end_layout

\begin_layout Itemize
UE-DEP
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
U
\series default
ser Extensible-
\series bold
D
\series default
igital 
\series bold
E
\series default
ffects 
\series bold
P
\series default
edal.
 
\end_layout

\begin_layout Itemize
Tentatively pronounced "yoo dehp"
\end_layout

\begin_layout Itemize
Name of this project and its GitHub repo.
 
\end_layout

\end_deeper
\begin_layout Itemize
DSP
\end_layout

\begin_deeper
\begin_layout Itemize
digital signal processing
\end_layout

\begin_layout Itemize
In this project, the DSP will mostly be one-dimensional audio signal processing
 where the signal is assumed to have negligible bandwidth below 20Hz and
 above 20kHz.
 
\end_layout

\begin_layout Itemize
I am assuming that the main input type is electric guitar or *any signal
 derived from it.* 
\end_layout

\end_deeper
\begin_layout Itemize
Discrete time
\end_layout

\begin_deeper
\begin_layout Itemize
Used to describe a signal that is only defined for integer time values or
 at times 
\begin_inset Formula $t_{n}$
\end_inset

 where 
\begin_inset Formula $n$
\end_inset

 is any integer.
\end_layout

\begin_layout Itemize
Uniform sampling is assumed throughout the project.
 Therefore, 
\begin_inset Formula $t_{n}=nT$
\end_inset

 where 
\begin_inset Formula $T=\frac{1}{f_{s}}$
\end_inset

 is a fixed sample rate and 
\begin_inset Formula $f_{s}$
\end_inset

 is the sample frequency.
\end_layout

\end_deeper
\begin_layout Itemize
Digital 
\end_layout

\begin_deeper
\begin_layout Itemize
Used to describe a signal that is Discrete in both time and *allowed values.*
 The latter is typically expressed by saying the signal is "quantized".
 
\end_layout

\begin_layout Itemize
All audio signals are represented on computers as digital signals where
 the allowed values are quantized to be one of 
\begin_inset Formula $2^{N}$
\end_inset

 values, where N is the bit depth (usually 16, 24, or 32).
\end_layout

\begin_layout Itemize
A control history of the on-off state of a push-button switch is represented
 as a digital signal where the allowed values are 1 or 0; or, the signal
 can be one of 
\begin_inset Formula $2^{1}=2$
\end_inset

 values, which can be represented with 1 bit.
 
\end_layout

\end_deeper
\begin_layout Itemize
Bit depth
\end_layout

\begin_deeper
\begin_layout Itemize
The number of bits needed to express all the possible amplitude levels a
 digital signal is allowed to be.
 For example, if a signal can be one of 
\begin_inset Formula $2^{6}=64$
\end_inset

 values, then the bit depth is 6 bits.
\end_layout

\end_deeper
\begin_layout Itemize
Sample frequency
\end_layout

\begin_deeper
\begin_layout Itemize
The number of times a waveform is sampled per second
\end_layout

\begin_layout Itemize
The sample frequency must be at least twice the highest expected frequency
 in the waveform.
\end_layout

\end_deeper
\begin_layout Itemize
RPi 
\end_layout

\begin_deeper
\begin_layout Itemize
Raspberry Pi
\end_layout

\begin_layout Itemize
Although in my project I will be using the Raspberry Pi 4, the hardware
 schematics should work for any microcontroller with i2S capability, 3V3
 logic, and possibly control pin remappings.
\end_layout

\end_deeper
\begin_layout Itemize
OS 
\end_layout

\begin_deeper
\begin_layout Itemize
Operating system
\end_layout

\end_deeper
\begin_layout Itemize
Real-time
\end_layout

\begin_deeper
\begin_layout Itemize
[Firm real-time](https://en.wikipedia.org/wiki/Real-time_computing#Criteria_for_re
al-time_computing)
\end_layout

\end_deeper
\begin_layout Itemize
FOSS 
\end_layout

\begin_deeper
\begin_layout Itemize
free and open source software using the 
\begin_inset CommandInset href
LatexCommand href
name "GNU Free Software Definition"
target "https://www.gnu.org/philosophy/free-sw.html.en#fs-definition"
literal "false"

\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
DAW
\end_layout

\begin_deeper
\begin_layout Itemize
A digital audio workstation (DAW) is a class of software that allows a user
 to manipulate digital audio streams, usually using real-time digital effects.
\end_layout

\begin_layout Itemize
Examples:
\end_layout

\begin_deeper
\begin_layout Itemize
ProTools
\end_layout

\begin_layout Itemize
REAPER
\end_layout

\begin_layout Itemize
Ardour
\end_layout

\begin_layout Itemize
Logic
\end_layout

\begin_layout Itemize
Garageband
\end_layout

\begin_layout Itemize
FL Studio
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Audio plugin
\end_layout

\begin_deeper
\begin_layout Itemize
A piece of software designed to extend the signal processing functionality
 of a DAW.
\end_layout

\begin_layout Itemize
Examples
\end_layout

\begin_deeper
\begin_layout Itemize
SimpleEQ - open-source linear equalizer that I wrote
\end_layout

\begin_layout Itemize
ReaEQ - REAPER's stock linear EQ, also available as a free plugin for any
 DAW
\end_layout

\begin_layout Itemize
Ignite Amps Emissary - A simulation of a high-gain amplifier based on a
 real valve amplifier.
 The real amplifier was only ever manufactured for the customer who ordered
 it, whereas the plugin is free to download from their website.
\end_layout

\begin_layout Itemize
Rosen Digital's Pulse - An impulse response convolution plugin designed
 to simulate the modified frequency response imparted to a guitar signal
 by the combination of the speaker, microphone, mic placement, and room.
 Practically, this allows a guitarist to record electric guitar parts without
 micing ujp a cabinet.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Plugin host 
\end_layout

\begin_deeper
\begin_layout Itemize
Any program capable of running at least one format of standard audio plugins
\end_layout

\begin_layout Itemize
For the purpose of this project, an "audio plugin host" will refer to a
 DAW that is not necessarily designed to permanently record input or output
 to a file.
 
\end_layout

\begin_layout Itemize
Examples
\end_layout

\begin_deeper
\begin_layout Itemize
VSTHost
\end_layout

\begin_layout Itemize
Nanohost
\end_layout

\begin_layout Itemize
Carla
\end_layout

\begin_layout Itemize
JUCE's AudioPluginHost
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Cabinet
\end_layout

\begin_deeper
\begin_layout Itemize
Technically, the cabinet is the box that holds a speaker in place
\end_layout

\begin_layout Itemize
Musicians typically refer to the entire speaker-cabinet assembly as a 
\begin_inset Quotes eld
\end_inset

cabinet
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Guitar cabinets have a tailored frequency response motivated by the fact
 that guitar is considered a 
\begin_inset Quotes eld
\end_inset

mid-range
\begin_inset Quotes erd
\end_inset

 instrument.
\end_layout

\end_deeper
\begin_layout Itemize
Micing
\end_layout

\begin_deeper
\begin_layout Itemize
Pronounced 
\begin_inset Quotes eld
\end_inset

mike-ing
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
The process of strategically placing a microphone in front of a sound source
 to record it
\end_layout

\end_deeper
\begin_layout Itemize
JUCE
\end_layout

\begin_deeper
\begin_layout Itemize
Jules' Utility Class Extensions
\end_layout

\begin_layout Itemize
A cross-platform C++ application framework
\end_layout

\begin_layout Itemize
Allows programmers to write code once and compile anywhere
\end_layout

\begin_layout Itemize
Includes extensive support for audio plugins
\end_layout

\begin_layout Itemize
JUCE plugins tend to 
\begin_inset Quotes eld
\end_inset

play nice
\begin_inset Quotes erd
\end_inset

 on multiple platforms
\end_layout

\end_deeper
\begin_layout Chapter
Subsystem Design Documents
\end_layout

\begin_layout Standard
This appendix goes over the technical design of each individual subcomponent.
 Besides the math and parameter values, I will also describe how the circuit
 operates and the justifications for choosing the individual parts.
 The main body of the report will contain abridged explanations of the circuits
 and their working.
 Colloquially, this appendix serves as the 
\begin_inset Quotes eld
\end_inset

long version
\begin_inset Quotes erd
\end_inset

 of those passages.
 The appendix is written with the assumption that the reader is proficient
 in the analysis of linear circuits
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A linear circuit is one where the circuit equations for an appropriate set
 of variables can be put into the form of a 
\emph on
linear system of differential equations
\emph default
.
 Practically, this means that circuits may have resistors, capacitors, inductors
, ideal voltage and current sources, sources that depend linearly on circuit
 variables, ideal or non-ideal transformers, opamps if saturation is neglected,
 or any legitimate connection of the above.
\end_layout

\end_inset

 with the Laplace and Fourier transform methods, as well as an understanding
 of basic electronic circuits for small signals.
\end_layout

\begin_layout Standard
The approach here is based on the premise that the subsystems are electrically
 and logically distinct.
 For example, the input high-pass filter operates on a voltage and outputs
 a filtered voltage.
 Its design is independent from the input low-pass filter and preamp.
 For each of these circuits, a Thevenin or Norton equivalent circuit can
 be used at the input and a generic load impedance at the output to design
 the circuit.
\end_layout

\begin_layout Standard
Particularly, the other components do not depend meaningfully on the fact
 that the DSP unit is a Raspberry Pi.
 Any microcomputer or microcontroller that has i2s capability and 3V3 logic
 can be substituted into these circuits 
\emph on
without modifying the circuit
\emph default
.
 In this Appendix, the DSP Unit will be treated as a generic integrated
 circuit, except in its dedicated subsection (
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:DSP-unit"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
The circuit equations will be derived with generic variables to exhibit
 how the values of each parameter affect the circuit, then solved analytically
 where it is feasible.
 Then, the chosen values will be plugged into the expression.
\end_layout

\begin_layout Standard
The block diagram has been reproduced below:
\end_layout

\begin_layout Standard
[insert BD]
\end_layout

\begin_layout Standard
[test reference: According to 
\begin_inset CommandInset citation
LatexCommand cite
key "proakis_manolakis_2013"
literal "false"

\end_inset

, DSP exists.]
\end_layout

\begin_layout Section
The audio signal chain and bypass
\end_layout

\begin_layout Standard
The audio signal chain refers to the linear path an audio signal will take
 assuming the pedal is not bypassed.
 The bypass circuit takes the pedal 
\begin_inset Quotes eld
\end_inset

out of the loop.
\begin_inset Quotes erd
\end_inset

 It is operated by a stomp-style toggle switch.
\end_layout

\begin_layout Subsubsection
Audio Input Connectors
\end_layout

\begin_layout Paragraph
Preamp
\end_layout

\begin_layout Standard
The basis of the preamp will be a standard non-inverting amplifier, where
 the feedback resistor will be partially replaced by a potentiometer that
 can be adjusted by the performer.
 The gain range will be 0dB
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
As a reminder, 0dB translates to no gain.
 
\emph on
This does not mean that the signal is muted.

\emph default
 The signal will simply propagate at whatever level it left the guitar.
\end_layout

\end_inset

 at its lowest to 30dB at its greatest.
 Most guitars have a volume knob
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Technically, one could build a guitar without one.
 Otherwise, all guitars made for sale have volume knobs.
\end_layout

\end_inset

, so attenuating the signal is possible from there.
 Muting the signal should be done with the bypass switch.
\end_layout

\begin_layout Standard
Because the ADC is single-ended, the preamp also needs to bias the incoming
 audio signal.
 Audio signals can be positive or negative.
 If a negative signal is sent to the ADC, it will off the negative swing.
 This will be perceived as audible distortion.
\end_layout

\begin_layout Standard
Lastly, the input impedance of this stage will be the impedance 
\begin_inset Quotes eld
\end_inset

seen
\begin_inset Quotes erd
\end_inset

 by the guitar.
 Input impedance affects how the guitar 
\begin_inset Quotes eld
\end_inset

feels.
\begin_inset Quotes erd
\end_inset

 More accurately, the guitar's circuit interacts with the circuitry of the
 other signal processing elements.
 This interaction can be heard by the guitarist in the way their guitar
 sounds and how it changes with respect to changes in playing technique.
\end_layout

\begin_layout Paragraph
High Pass
\end_layout

\begin_layout Standard
The purpose of the high-pass filter is to remove low-frequency garbage that
 corrupts the audible part of the signal with worthless signal energy.
 Practically, a high-pass-filtered signal sounds clearer and better defined.
 Additionally, guitar speakers can be permanently damaged by large low frequency
 excursions.
 This is especially a problem for bassists playing through guitar speaker
 cabinets.
 
\end_layout

\begin_layout Paragraph
Low Pass
\end_layout

\begin_layout Standard
The purpose of the low-pass filter is to enforce Shannon's sampling theorem
 to avoid audible distortion caused by aliasing.
 Practically, this means attenuating out-of-band frequencies to below the
 size of 1 LSB (least significant bit) for the ADC.
\end_layout

\begin_layout Standard
The fundamental note of a guitar signal will not exceed about 4kHz, and
 even this is a high estimate.
 That being said, it is plausible that a guitarist might use an analog distortio
n pedal 
\emph on
in front
\emph default
 of the pedal.
 Typically, a distortion pedal adds, besides even and odd order harmonics,
 a bunch of crossover terms.
 [Add RS-MET proof] This results in a noisy spectrum for almost all notes
 on the guitar.
 Thus, the pedal needs to allow the transmission of all the frequencies
 that are required to retain the sound of an average distortion pedal.
\end_layout

\begin_layout Standard
The answer to this question admittedly begins with a subjective ballpark
 judgement of the required frequency response by applying a low-pass to
 various distortion effects and seeing how low I can set the frequency before
 losing important qualities of the distortion.
 What I came up with is that the cutoff can be set around 10kHz.
 The best explanation I can offer relies on the fact that 
\begin_inset Quotes eld
\end_inset

Presence
\begin_inset Quotes erd
\end_inset

 controls on high-gain guitar amplifiers are typically analog filters that
 cut or boost high frequencies with a resonant peak (or dip) between 5kHz-10kHz.
 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Incidentally, this is typically where I and most other audio mixers place
 a software high-pass when processing high-gain guitar.
 Audio engineers typically learn how to set high-passes and other filters
 
\begin_inset Quotes eld
\end_inset

by ear
\begin_inset Quotes erd
\end_inset

 directly in the digital domain with an audio plugin.
 Even with my signals and systems knowledge, I find this to be the most
 reliable way to determine a cutoff frequency (at least for audible signals).
\end_layout

\end_inset

 From my experience of dialing in dozens of high-gain amplifiers and distortion
 pedals, I have learned that correctly setting the Presence control (when
 it is there) is one of the most important ways for a guitar track to cut
 through the mix.
 In a typical rock or metal mix, this frequency band is sparsely populated
 other than the band of guitar distortion affected by the Presence control.
 My hypothesis is that this frequency band is where listeners (subconsciously)
 
\begin_inset Quotes eld
\end_inset

look
\begin_inset Quotes erd
\end_inset

 for distorted guitar when more important frequency bands are masked by
 other instruments.
\end_layout

\begin_layout Paragraph
ADC
\end_layout

\begin_layout Standard
The ADC is a breakout board based on the TI PCM1808 integrated circuit.
 The PCM1808 is an oversampling converter that uses a 
\begin_inset Formula $\Sigma\Delta$
\end_inset

 architecture.
 [Explain that].
 It converts audio data to serialized binary using the i2s protocol.
\end_layout

\begin_layout Subsubsection
DSP unit
\begin_inset CommandInset label
LatexCommand label
name "subsec:DSP-unit"

\end_inset


\end_layout

\begin_layout Standard
The DSP unit is the Raspberry Pi 4 either running a plugin host or send
 input to output (e.g., implementing the identity system).
 The Pi is unmodified, and it is running 64-bit RPi OS.
\end_layout

\begin_layout Subsubsection
Audio Output
\end_layout

\begin_layout Paragraph
DAC+Headphone Amplifier
\end_layout

\begin_layout Standard
The DAC+Amplifier is a breakout board based on the TI PCM5102 integrated
 circuit.
 The PCM5102 converts i2s binary signals to a continuous audio waveform.
 There is a headphone amplifier built into the board.
 The schematic for the breakout board has been reproduced below.
 
\end_layout

\begin_layout Paragraph
Preamp
\end_layout

\begin_layout Standard
The basis of the preamp will be a standard non-inverting amplifier, where
 the feedback resistor will be partially replaced by a potentiometer that
 can be adjusted by the performer.
 
\end_layout

\begin_layout Paragraph
High Pass
\end_layout

\begin_layout Standard
The purpose of the high-pass filter is similar to the input high-pass.
 According to its datasheet, the ADC can accept signals between 0V and 3.1V.
 For the filter stages, let's 
\end_layout

\begin_layout Paragraph
Low Pass
\end_layout

\begin_layout Standard
The purpose of the low-pass filter is to ensure that inaudible frequencies
 do not take up useless signal energy or possibly affect other digital gear
 down the line.
 This time, the filter cutoff really needs to be quite close to 20kHz, because
 it is absolutely plausible that a guitarist might either pitch-shift their
 guitar or add heavy harmonic distoriton in the DSP unit.
\end_layout

\begin_layout Standard
Additionally, this circuit will set the output impedance seen by an amplifier,
 guitar pedal, or audio interface.
 Consequently, it must lie within a interval of 
\begin_inset Quotes eld
\end_inset

expected
\begin_inset Quotes erd
\end_inset

 values that are 
\begin_inset Quotes eld
\end_inset

much smaller than
\begin_inset Quotes erd
\end_inset

 the input impedance of subsequent stages.
\end_layout

\begin_layout Section
The MIDI signal chain
\end_layout

\begin_layout Standard
To send and receive MIDI data to test the functionality, I will use the
 MIDI input and output on my FocusRite Scarlett USB Audio Interface.
\end_layout

\begin_layout Standard
As an alternative to hard-wired MIDI, there exist controllers that utilize
 
\emph on
MIDI over USB
\emph default
.
 These controllers are typically 
\begin_inset Quotes eld
\end_inset

plug and play.
\begin_inset Quotes erd
\end_inset

 Other than pointing the audio host to the controller, no further software
 coniguration is needed.
\end_layout

\begin_layout Subsection
Input
\end_layout

\begin_layout Standard
The input circuit is based on the one detailed in the original MIDI 1.0 Standard
 updated with a better optoisolator.
 The important parameter of the optoisolator in this circuit is how quickly
 it can change.
 Thus, it can be easily switched for an otherwise generic 
\begin_inset Quotes eld
\end_inset

fast
\begin_inset Quotes erd
\end_inset

 optoisolator.
 Modern manufacturers now use the [insert optoisolator].
 To conform to mainstream industry practice, my design uses the same component.
\end_layout

\begin_layout Subsection
DSP Unit
\end_layout

\begin_layout Standard
The DSP Unit is still the same Pi as the one in the audio signal chain,
 as indicated in the block diagram.
\end_layout

\begin_layout Standard
To actually use or modify MIDI data, the MIDI serial signal needs to be
 received and stored into the Pi's GPIO input.
 Similarly, for MIDI output, the Pi must send MIDI notes as serialized data.
 Once the hardware is properly hooked up, JACK will be configured to 
\begin_inset Quotes eld
\end_inset

see
\begin_inset Quotes erd
\end_inset

 the MIDI I/O.
 Then, Carla should be able to 
\begin_inset Quotes eld
\end_inset

see
\begin_inset Quotes erd
\end_inset

 the MIDI input 
\end_layout

\begin_layout Subsection
Output
\end_layout

\begin_layout Standard
The output circuit is based on the one detailed in the original MIDI 1.0
 Standard.
\end_layout

\begin_layout Section
The control bank
\end_layout

\begin_layout Standard
The control bank is the set of external controls that can be mapped to plugin
 parameters.
 Each subcomponent in the bank is independent from the others.
\end_layout

\begin_layout Subsection
Expression Pedal Input
\end_layout

\begin_layout Standard
An expression pedal is a variable voltage divider where the ratio is set
 by the angle of the rocker.
 Expression pedals are used by performers to modulate pedal parameters while
 their hands are occupied playing guitar.
 To interface with the DSP unit, the voltage at the divider needs to be
 converted to a number within a range.
 This is accomplished with a [insert other ADC here].
 This converts a slowly-changing signal to an integer transmitted as a serialize
d binary signal with the i2C protocol.
\end_layout

\begin_layout Subsection
Rotary Encoder
\end_layout

\begin_layout Standard
The rotary encoder will be simply implemented with a ready-made 24-position
 rotary encoder.
\end_layout

\begin_layout Subsection
Push button
\end_layout

\begin_layout Standard
The push button will be implemented with an ordinary push-button switch
 and a pullup resistor in the following configuration:
\end_layout

\begin_layout Section
The touch screen
\end_layout

\begin_layout Section
Power distribution
\end_layout

\begin_layout Standard
Overall power will be supplied by a generic 9V 72W power supply.
 (My particular supply has an adjustable voltage, but if any more units
 are produced, they would use a generic 9V supply.) This power will be stepped
 down to 5V with a breakout board.
 The board accepts bare wires or a barrel plug, and it outputs 5V power
 through USB.
 This will power the Pi through its USB port.
 Although it is possible to power the Pi in other ways, the documentation
 states that the 
\emph on
only
\emph default
 
\begin_inset Quotes eld
\end_inset

safe
\begin_inset Quotes erd
\end_inset

 way to power the Pi is through its USB port with standard 5V power.
\end_layout

\begin_layout Subsection
Audio Op-amps
\end_layout

\begin_layout Standard
According to their datasheets, the NE5532 op-amps should 
\begin_inset Quotes eld
\end_inset

work fine
\begin_inset Quotes erd
\end_inset

 when powered by a single 5V supply.
 However, according to tests performed by Douglas Self (self), 5V is actually
 the practical minimum.
 In order to obtain more linear amplification and filtering, the design
 will be powered with a single 
\emph on
9V
\emph default
 source.
 Practically, this means that the op-amps will be powered directly from
 the generic power supply.
\end_layout

\begin_layout Standard
Additionally, a bias voltage needs to be provided for each op-amp stage.
 Details of the biasing circuit are in each filter section.
 Because the filters share a common bias voltage, the circuit to establish
 and maintain that bias voltage will be discussed here.
 Any voltage that biases more than one gain stage will utilize the following
 circuit.
\end_layout

\begin_layout Standard
The circuit is basically a resistive voltage divider followed by an op-amp
 voltage follower.
 The op-amp was chosen because of its high current output capability.
 The other specs are 
\begin_inset Quotes eld
\end_inset

middle of the road,
\begin_inset Quotes erd
\end_inset

 especially its noise voltage specification.
 
\end_layout

\begin_layout Chapter
Licenses
\end_layout

\begin_layout Standard
As a designer, I am not interested in imposing any restrictions upon the
 usage of my software.
 However, because of the nature of the Copyright system and the FOSS licenses
 of several software components in this project, it is not as simple as
 merely releasing the work into the public domain without any copyright.
\end_layout

\begin_layout Standard
Very briefly, most FOSS software uses some type of 
\emph on
copyleft
\emph default
 licensing.
 The idea of copyleft licenses is to 
\emph on
require
\emph default
 those who use parts of the 
\end_layout

\begin_layout Standard
As a developer, the constraints imposed by free software licenses are a
 mild annoyance that requires me to check that the licenses are compatible
 with my work.
 Because I spend a lot more time as a consumer of open-source software,
 I am pleased to know that I am free to use their software as I please.
 I would like to extend this freedom to users of my project or any of its
 potential derivatives.
\end_layout

\begin_layout Section
Plagiarism
\end_layout

\begin_layout Standard
According to NJIT's University Policy on Academic Integrity, plagiarism
 is defined as follows:
\end_layout

\begin_layout Quotation
Plagiarism is defined as: Using or attempting to use written, oral, or graphic
 work which was authored or prepared by another and submitting it as one’s
 own without appropriate citation or credit.
 Intentionally or knowingly representing the words or ideas of another as
 one’s own in any academic exercise.
 It is also a combination of stealing and lying about it afterwards.
\end_layout

\begin_layout Standard
Thus, in order to conform to the University's academic standards, all software
 utilized will be listed.
 Note that software typically depends on other software.
 FOSS licenses require, by virtue of the inheritence of user freedoms, all
 software used to be either FOSS or able to be used as part of the software
 whenever that software is used.
 To save time tracking down all the dependencies and their individual licenses,
 I will be listing the licenses of top-level software only.
 Those pieces of software are, as per the construction of copyleft licenses,
 required to internally show the licenses for their own dependencies.
 For example, it is not necessary to cite the license for the Linux kernel
 
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
unless the kernel is modified!
\end_layout

\end_inset

 because it is a dependency of the Raspberry Pi OS.
 In this case, Raspberry Pi OS is responsible for conforming to the licenses
 of their software.
 Indeed, Raspberry Pi OS includes all the licenses and their content embedded
 in the default installation of their operating system.
\end_layout

\begin_layout Standard
Lastly, attribution is 
\emph on
not
\emph default
 required to legally use FOSS in a project for most licenses.
 I need to explicitly attribute my works in order to conform to the University's
 academic policy.
 Also, I would like to credit the people who made my project possible.
\end_layout

\begin_layout Section
Texts of the Licenses
\end_layout

\begin_layout Subsection
MIT License
\end_layout

\begin_layout Verbatim

Copyright (c) <year> <copyright holders>
\end_layout

\begin_layout Verbatim

Permission is hereby granted, free of charge, to any person obtaining a
 copy of this software and associated documentation files (the "Software"),
 to deal in the Software without restriction, including without limitation
 the rights to use, copy, modify, merge, publish, distribute, sublicense,
 and/or sell copies of the Software, and to permit persons to whom the Software
 is furnished to do so, subject to the following conditions:
\end_layout

\begin_layout Verbatim

The above copyright notice and this permission notice shall be included
 in all copies or substantial portions of the Software.
\end_layout

\begin_layout Verbatim

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE
, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.
\end_layout

\begin_layout Subsection
BSD 3-Clause License
\end_layout

\begin_layout Verbatim

Copyright <YEAR> <COPYRIGHT HOLDER>
\end_layout

\begin_layout Verbatim

Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:
\end_layout

\begin_layout Verbatim

1.
 Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.
\end_layout

\begin_layout Verbatim

2.
 Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.
\end_layout

\begin_layout Verbatim

3.
 Neither the name of the copyright holder nor the names of its contributors
 may be used to endorse or promote products derived from this software without
 specific prior written permission.
\end_layout

\begin_layout Verbatim

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\end_layout

\begin_layout Subsection
GNU GPL 2.0 License
\end_layout

\begin_layout Verbatim

                    GNU GENERAL PUBLIC LICENSE                        Version
 2, June 1991
\end_layout

\begin_layout Verbatim

 Copyright (C) 1989, 1991 Free Software Foundation, Inc.,  51 Franklin Street,
 Fifth Floor, Boston, MA 02110-1301 USA  Everyone is permitted to copy and
 distribute verbatim copies  of this license document, but changing it is
 not allowed.
\end_layout

\begin_layout Verbatim

                            Preamble
\end_layout

\begin_layout Verbatim

  The licenses for most software are designed to take away your freedom
 to share and change it.
  By contrast, the GNU General Public License is intended to guarantee your
 freedom to share and change free software--to make sure the software is
 free for all its users.
  This General Public License applies to most of the Free Software Foundation's
 software and to any other program whose authors commit to using it.
  (Some other Free Software Foundation software is covered by the GNU Lesser
 General Public License instead.)  You can apply it to your programs, too.
\end_layout

\begin_layout Verbatim

  When we speak of free software, we are referring to freedom, not price.
  Our General Public Licenses are designed to make sure that you have the
 freedom to distribute copies of free software (and charge for this service
 if you wish), that you receive source code or can get it if you want it,
 that you can change the software or use pieces of it in new free programs;
 and that you know you can do these things.
\end_layout

\begin_layout Verbatim

  To protect your rights, we need to make restrictions that forbid anyone
 to deny you these rights or to ask you to surrender the rights.
 These restrictions translate to certain responsibilities for you if you
 distribute copies of the software, or if you modify it.
\end_layout

\begin_layout Verbatim

  For example, if you distribute copies of such a program, whether gratis
 or for a fee, you must give the recipients all the rights that you have.
  You must make sure that they, too, receive or can get the source code.
  And you must show them these terms so they know their rights.
\end_layout

\begin_layout Verbatim

  We protect your rights with two steps: (1) copyright the software, and
 (2) offer you this license which gives you legal permission to copy, distribute
 and/or modify the software.
\end_layout

\begin_layout Verbatim

  Also, for each author's protection and ours, we want to make certain that
 everyone understands that there is no warranty for this free software.
  If the software is modified by someone else and passed on, we want its
 recipients to know that what they have is not the original, so that any
 problems introduced by others will not reflect on the original authors'
 reputations.
\end_layout

\begin_layout Verbatim

  Finally, any free program is threatened constantly by software patents.
  We wish to avoid the danger that redistributors of a free program will
 individually obtain patent licenses, in effect making the program proprietary.
  To prevent this, we have made it clear that any patent must be licensed
 for everyone's free use or not licensed at all.
\end_layout

\begin_layout Verbatim

  The precise terms and conditions for copying, distribution and modification
 follow.
\end_layout

\begin_layout Verbatim

                    GNU GENERAL PUBLIC LICENSE    TERMS AND CONDITIONS FOR
 COPYING, DISTRIBUTION AND MODIFICATION
\end_layout

\begin_layout Verbatim

  0.
 This License applies to any program or other work which contains a notice
 placed by the copyright holder saying it may be distributed under the terms
 of this General Public License.
  The "Program", below, refers to any such program or work, and a "work
 based on the Program" means either the Program or any derivative work under
 copyright law: that is to say, a work containing the Program or a portion
 of it, either verbatim or with modifications and/or translated into another
 language.
  (Hereinafter, translation is included without limitation in the term "modifica
tion".)  Each licensee is addressed as "you".
\end_layout

\begin_layout Verbatim

Activities other than copying, distribution and modification are not covered
 by this License; they are outside its scope.
  The act of running the Program is not restricted, and the output from
 the Program is covered only if its contents constitute a work based on
 the Program (independent of having been made by running the Program).
 Whether that is true depends on what the Program does.
\end_layout

\begin_layout Verbatim

  1.
 You may copy and distribute verbatim copies of the Program's source code
 as you receive it, in any medium, provided that you conspicuously and appropria
tely publish on each copy an appropriate copyright notice and disclaimer
 of warranty; keep intact all the notices that refer to this License and
 to the absence of any warranty; and give any other recipients of the Program
 a copy of this License along with the Program.
\end_layout

\begin_layout Verbatim

You may charge a fee for the physical act of transferring a copy, and you
 may at your option offer warranty protection in exchange for a fee.
\end_layout

\begin_layout Verbatim

  2.
 You may modify your copy or copies of the Program or any portion of it,
 thus forming a work based on the Program, and copy and distribute such
 modifications or work under the terms of Section 1 above, provided that
 you also meet all of these conditions:
\end_layout

\begin_layout Verbatim

    a) You must cause the modified files to carry prominent notices    
 stating that you changed the files and the date of any change.
\end_layout

\begin_layout Verbatim

    b) You must cause any work that you distribute or publish, that in 
    whole or in part contains or is derived from the Program or any    
 part thereof, to be licensed as a whole at no charge to all third     parties
 under the terms of this License.
\end_layout

\begin_layout Verbatim

    c) If the modified program normally reads commands interactively   
  when run, you must cause it, when started running for such     interactive
 use in the most ordinary way, to print or display an     announcement including
 an appropriate copyright notice and a     notice that there is no warranty
 (or else, saying that you provide     a warranty) and that users may redistribu
te the program under     these conditions, and telling the user how to view
 a copy of this     License.
  (Exception: if the Program itself is interactive but     does not normally
 print such an announcement, your work based on     the Program is not required
 to print an announcement.)
\end_layout

\begin_layout Verbatim

These requirements apply to the modified work as a whole.
  If identifiable sections of that work are not derived from the Program,
 and can be reasonably considered independent and separate works in themselves,
 then this License, and its terms, do not apply to those sections when you
 distribute them as separate works.
  But when you distribute the same sections as part of a whole which is
 a work based on the Program, the distribution of the whole must be on the
 terms of this License, whose permissions for other licensees extend to
 the entire whole, and thus to each and every part regardless of who wrote
 it.
\end_layout

\begin_layout Verbatim

Thus, it is not the intent of this section to claim rights or contest your
 rights to work written entirely by you; rather, the intent is to exercise
 the right to control the distribution of derivative or collective works
 based on the Program.
\end_layout

\begin_layout Verbatim

In addition, mere aggregation of another work not based on the Program with
 the Program (or with a work based on the Program) on a volume of a storage
 or distribution medium does not bring the other work under the scope of
 this License.
\end_layout

\begin_layout Verbatim

  3.
 You may copy and distribute the Program (or a work based on it, under Section
 2) in object code or executable form under the terms of Sections 1 and
 2 above provided that you also do one of the following:
\end_layout

\begin_layout Verbatim

    a) Accompany it with the complete corresponding machine-readable   
  source code, which must be distributed under the terms of Sections   
  1 and 2 above on a medium customarily used for software interchange; or,
\end_layout

\begin_layout Verbatim

    b) Accompany it with a written offer, valid for at least three     years,
 to give any third party, for a charge no more than your     cost of physically
 performing source distribution, a complete     machine-readable copy of
 the corresponding source code, to be     distributed under the terms of
 Sections 1 and 2 above on a medium     customarily used for software interchang
e; or,
\end_layout

\begin_layout Verbatim

    c) Accompany it with the information you received as to the offer  
   to distribute corresponding source code.
  (This alternative is     allowed only for noncommercial distribution and
 only if you     received the program in object code or executable form
 with such     an offer, in accord with Subsection b above.)
\end_layout

\begin_layout Verbatim

The source code for a work means the preferred form of the work for making
 modifications to it.
  For an executable work, complete source code means all the source code
 for all modules it contains, plus any associated interface definition files,
 plus the scripts used to control compilation and installation of the executable.
  However, as a special exception, the source code distributed need not
 include anything that is normally distributed (in either source or binary
 form) with the major components (compiler, kernel, and so on) of the operating
 system on which the executable runs, unless that component itself accompanies
 the executable.
\end_layout

\begin_layout Verbatim

If distribution of executable or object code is made by offering access
 to copy from a designated place, then offering equivalent access to copy
 the source code from the same place counts as distribution of the source
 code, even though third parties are not compelled to copy the source along
 with the object code.
\end_layout

\begin_layout Verbatim

  4.
 You may not copy, modify, sublicense, or distribute the Program except
 as expressly provided under this License.
  Any attempt otherwise to copy, modify, sublicense or distribute the Program
 is void, and will automatically terminate your rights under this License.
 However, parties who have received copies, or rights, from you under this
 License will not have their licenses terminated so long as such parties
 remain in full compliance.
\end_layout

\begin_layout Verbatim

  5.
 You are not required to accept this License, since you have not signed
 it.
  However, nothing else grants you permission to modify or distribute the
 Program or its derivative works.
  These actions are prohibited by law if you do not accept this License.
  Therefore, by modifying or distributing the Program (or any work based
 on the Program), you indicate your acceptance of this License to do so,
 and all its terms and conditions for copying, distributing or modifying
 the Program or works based on it.
\end_layout

\begin_layout Verbatim

  6.
 Each time you redistribute the Program (or any work based on the Program),
 the recipient automatically receives a license from the original licensor
 to copy, distribute or modify the Program subject to these terms and conditions.
  You may not impose any further restrictions on the recipients' exercise
 of the rights granted herein.
 You are not responsible for enforcing compliance by third parties to this
 License.
\end_layout

\begin_layout Verbatim

  7.
 If, as a consequence of a court judgment or allegation of patent infringement
 or for any other reason (not limited to patent issues), conditions are
 imposed on you (whether by court order, agreement or otherwise) that contradict
 the conditions of this License, they do not excuse you from the conditions
 of this License.
  If you cannot distribute so as to satisfy simultaneously your obligations
 under this License and any other pertinent obligations, then as a consequence
 you may not distribute the Program at all.
  For example, if a patent license would not permit royalty-free redistribution
 of the Program by all those who receive copies directly or indirectly through
 you, then the only way you could satisfy both it and this License would
 be to refrain entirely from distribution of the Program.
\end_layout

\begin_layout Verbatim

If any portion of this section is held invalid or unenforceable under any
 particular circumstance, the balance of the section is intended to apply
 and the section as a whole is intended to apply in other circumstances.
\end_layout

\begin_layout Verbatim

It is not the purpose of this section to induce you to infringe any patents
 or other property right claims or to contest validity of any such claims;
 this section has the sole purpose of protecting the integrity of the free
 software distribution system, which is implemented by public license practices.
  Many people have made generous contributions to the wide range of software
 distributed through that system in reliance on consistent application of
 that system; it is up to the author/donor to decide if he or she is willing
 to distribute software through any other system and a licensee cannot impose
 that choice.
\end_layout

\begin_layout Verbatim

This section is intended to make thoroughly clear what is believed to be
 a consequence of the rest of this License.
\end_layout

\begin_layout Verbatim

  8.
 If the distribution and/or use of the Program is restricted in certain
 countries either by patents or by copyrighted interfaces, the original
 copyright holder who places the Program under this License may add an explicit
 geographical distribution limitation excluding those countries, so that
 distribution is permitted only in or among countries not thus excluded.
  In such case, this License incorporates the limitation as if written in
 the body of this License.
\end_layout

\begin_layout Verbatim

  9.
 The Free Software Foundation may publish revised and/or new versions of
 the General Public License from time to time.
  Such new versions will be similar in spirit to the present version, but
 may differ in detail to address new problems or concerns.
\end_layout

\begin_layout Verbatim

Each version is given a distinguishing version number.
  If the Program specifies a version number of this License which applies
 to it and "any later version", you have the option of following the terms
 and conditions either of that version or of any later version published
 by the Free Software Foundation.
  If the Program does not specify a version number of this License, you
 may choose any version ever published by the Free Software Foundation.
\end_layout

\begin_layout Verbatim

  10.
 If you wish to incorporate parts of the Program into other free programs
 whose distribution conditions are different, write to the author to ask
 for permission.
  For software which is copyrighted by the Free Software Foundation, write
 to the Free Software Foundation; we sometimes make exceptions for this.
  Our decision will be guided by the two goals of preserving the free status
 of all derivatives of our free software and of promoting the sharing and
 reuse of software generally.
\end_layout

\begin_layout Verbatim

                            NO WARRANTY
\end_layout

\begin_layout Verbatim

  11.
 BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR
 THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
 PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
 EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH
 YOU.
  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
 SERVICING, REPAIR OR CORRECTION.
\end_layout

\begin_layout Verbatim

  12.
 IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL
 ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE
 THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING
 ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF
 THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS
 OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
 THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
 EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY
 OF SUCH DAMAGES.
\end_layout

\begin_layout Verbatim

                     END OF TERMS AND CONDITIONS
\end_layout

\begin_layout Verbatim

            How to Apply These Terms to Your New Programs
\end_layout

\begin_layout Verbatim

  If you develop a new program, and you want it to be of the greatest possible
 use to the public, the best way to achieve this is to make it free software
 which everyone can redistribute and change under these terms.
\end_layout

\begin_layout Verbatim

  To do so, attach the following notices to the program.
  It is safest to attach them to the start of each source file to most effective
ly convey the exclusion of warranty; and each file should have at least
 the "copyright" line and a pointer to where the full notice is found.
\end_layout

\begin_layout Verbatim

    <one line to give the program's name and a brief idea of what it does.>
     Copyright (C) <year>  <name of author>
\end_layout

\begin_layout Verbatim

    This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or 
    (at your option) any later version.
\end_layout

\begin_layout Verbatim

    This program is distributed in the hope that it will be useful,    
 but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABIL
ITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the     GNU General Public License for more details.
\end_layout

\begin_layout Verbatim

    You should have received a copy of the GNU General Public License along
     with this program; if not, write to the Free Software Foundation, Inc.,
     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
\end_layout

\begin_layout Verbatim

Also add information on how to contact you by electronic and paper mail.
\end_layout

\begin_layout Verbatim

If the program is interactive, make it output a short notice like this when
 it starts in an interactive mode:
\end_layout

\begin_layout Verbatim

    Gnomovision version 69, Copyright (C) year name of author     Gnomovision
 comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
     This is free software, and you are welcome to redistribute it     under
 certain conditions; type `show c' for details.
\end_layout

\begin_layout Verbatim

The hypothetical commands `show w' and `show c' should show the appropriate
 parts of the General Public License.
  Of course, the commands you use may be called something other than `show
 w' and `show c'; they could even be mouse-clicks or menu items--whatever
 suits your program.
\end_layout

\begin_layout Verbatim

You should also get your employer (if you work as a programmer) or your
 school, if any, to sign a "copyright disclaimer" for the program, if necessary.
  Here is a sample; alter the names:
\end_layout

\begin_layout Verbatim

  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
   `Gnomovision' (which makes passes at compilers) written by James Hacker.
\end_layout

\begin_layout Verbatim

  <signature of Ty Coon>, 1 April 1989   Ty Coon, President of Vice
\end_layout

\begin_layout Verbatim

This General Public License does not permit incorporating your program into
 proprietary programs.
  If your program is a subroutine library, you may consider it more useful
 to permit linking proprietary applications with the library.
  If this is what you want to do, use the GNU Lesser General Public License
 instead of this License.
\end_layout

\begin_layout Subsection
GNU GPL 3.0 License
\end_layout

\begin_layout Verbatim

                    GNU GENERAL PUBLIC LICENSE                        Version
 3, 29 June 2007
\end_layout

\begin_layout Verbatim

 Copyright (C) 2007 Free Software Foundation, Inc.
 <https://fsf.org/>  Everyone is permitted to copy and distribute verbatim
 copies  of this license document, but changing it is not allowed.
\end_layout

\begin_layout Verbatim

                            Preamble
\end_layout

\begin_layout Verbatim

  The GNU General Public License is a free, copyleft license for software
 and other kinds of works.
\end_layout

\begin_layout Verbatim

  The licenses for most software and other practical works are designed
 to take away your freedom to share and change the works.
  By contrast, the GNU General Public License is intended to guarantee your
 freedom to share and change all versions of a program--to make sure it
 remains free software for all its users.
  We, the Free Software Foundation, use the GNU General Public License for
 most of our software; it applies also to any other work released this way
 by its authors.
  You can apply it to your programs, too.
\end_layout

\begin_layout Verbatim

  When we speak of free software, we are referring to freedom, not price.
  Our General Public Licenses are designed to make sure that you have the
 freedom to distribute copies of free software (and charge for them if you
 wish), that you receive source code or can get it if you want it, that
 you can change the software or use pieces of it in new free programs, and
 that you know you can do these things.
\end_layout

\begin_layout Verbatim

  To protect your rights, we need to prevent others from denying you these
 rights or asking you to surrender the rights.
  Therefore, you have certain responsibilities if you distribute copies
 of the software, or if you modify it: responsibilities to respect the freedom
 of others.
\end_layout

\begin_layout Verbatim

  For example, if you distribute copies of such a program, whether gratis
 or for a fee, you must pass on to the recipients the same freedoms that
 you received.
  You must make sure that they, too, receive or can get the source code.
  And you must show them these terms so they know their rights.
\end_layout

\begin_layout Verbatim

  Developers that use the GNU GPL protect your rights with two steps: (1)
 assert copyright on the software, and (2) offer you this License giving
 you legal permission to copy, distribute and/or modify it.
\end_layout

\begin_layout Verbatim

  For the developers' and authors' protection, the GPL clearly explains
 that there is no warranty for this free software.
  For both users' and authors' sake, the GPL requires that modified versions
 be marked as changed, so that their problems will not be attributed erroneously
 to authors of previous versions.
\end_layout

\begin_layout Verbatim

  Some devices are designed to deny users access to install or run modified
 versions of the software inside them, although the manufacturer can do
 so.
  This is fundamentally incompatible with the aim of protecting users' freedom
 to change the software.
  The systematic pattern of such abuse occurs in the area of products for
 individuals to use, which is precisely where it is most unacceptable.
  Therefore, we have designed this version of the GPL to prohibit the practice
 for those products.
  If such problems arise substantially in other domains, we stand ready
 to extend this provision to those domains in future versions of the GPL,
 as needed to protect the freedom of users.
\end_layout

\begin_layout Verbatim

  Finally, every program is threatened constantly by software patents.
 States should not allow patents to restrict development and use of software
 on general-purpose computers, but in those that do, we wish to avoid the
 special danger that patents applied to a free program could make it effectively
 proprietary.
  To prevent this, the GPL assures that patents cannot be used to render
 the program non-free.
\end_layout

\begin_layout Verbatim

  The precise terms and conditions for copying, distribution and modification
 follow.
\end_layout

\begin_layout Verbatim

                       TERMS AND CONDITIONS
\end_layout

\begin_layout Verbatim

  0.
 Definitions.
\end_layout

\begin_layout Verbatim

  "This License" refers to version 3 of the GNU General Public License.
\end_layout

\begin_layout Verbatim

  "Copyright" also means copyright-like laws that apply to other kinds of
 works, such as semiconductor masks.
\end_layout

\begin_layout Verbatim

  "The Program" refers to any copyrightable work licensed under this License.
  Each licensee is addressed as "you".
  "Licensees" and "recipients" may be individuals or organizations.
\end_layout

\begin_layout Verbatim

  To "modify" a work means to copy from or adapt all or part of the work
 in a fashion requiring copyright permission, other than the making of an
 exact copy.
  The resulting work is called a "modified version" of the earlier work
 or a work "based on" the earlier work.
\end_layout

\begin_layout Verbatim

  A "covered work" means either the unmodified Program or a work based on
 the Program.
\end_layout

\begin_layout Verbatim

  To "propagate" a work means to do anything with it that, without permission,
 would make you directly or secondarily liable for infringement under applicable
 copyright law, except executing it on a computer or modifying a private
 copy.
  Propagation includes copying, distribution (with or without modification),
 making available to the public, and in some countries other activities
 as well.
\end_layout

\begin_layout Verbatim

  To "convey" a work means any kind of propagation that enables other parties
 to make or receive copies.
  Mere interaction with a user through a computer network, with no transfer
 of a copy, is not conveying.
\end_layout

\begin_layout Verbatim

  An interactive user interface displays "Appropriate Legal Notices" to
 the extent that it includes a convenient and prominently visible feature
 that (1) displays an appropriate copyright notice, and (2) tells the user
 that there is no warranty for the work (except to the extent that warranties
 are provided), that licensees may convey the work under this License, and
 how to view a copy of this License.
  If the interface presents a list of user commands or options, such as
 a menu, a prominent item in the list meets this criterion.
\end_layout

\begin_layout Verbatim

  1.
 Source Code.
\end_layout

\begin_layout Verbatim

  The "source code" for a work means the preferred form of the work for
 making modifications to it.
  "Object code" means any non-source form of a work.
\end_layout

\begin_layout Verbatim

  A "Standard Interface" means an interface that either is an official standard
 defined by a recognized standards body, or, in the case of interfaces specified
 for a particular programming language, one that is widely used among developers
 working in that language.
\end_layout

\begin_layout Verbatim

  The "System Libraries" of an executable work include anything, other than
 the work as a whole, that (a) is included in the normal form of packaging
 a Major Component, but which is not part of that Major Component, and (b)
 serves only to enable use of the work with that Major Component, or to
 implement a Standard Interface for which an implementation is available
 to the public in source code form.
  A "Major Component", in this context, means a major essential component
 (kernel, window system, and so on) of the specific operating system (if
 any) on which the executable work runs, or a compiler used to produce the
 work, or an object code interpreter used to run it.
\end_layout

\begin_layout Verbatim

  The "Corresponding Source" for a work in object code form means all the
 source code needed to generate, install, and (for an executable work) run
 the object code and to modify the work, including scripts to control those
 activities.
  However, it does not include the work's System Libraries, or general-purpose
 tools or generally available free programs which are used unmodified in
 performing those activities but which are not part of the work.
  For example, Corresponding Source includes interface definition files
 associated with source files for the work, and the source code for shared
 libraries and dynamically linked subprograms that the work is specifically
 designed to require, such as by intimate data communication or control
 flow between those subprograms and other parts of the work.
\end_layout

\begin_layout Verbatim

  The Corresponding Source need not include anything that users can regenerate
 automatically from other parts of the Corresponding Source.
\end_layout

\begin_layout Verbatim

  The Corresponding Source for a work in source code form is that same work.
\end_layout

\begin_layout Verbatim

  2.
 Basic Permissions.
\end_layout

\begin_layout Verbatim

  All rights granted under this License are granted for the term of copyright
 on the Program, and are irrevocable provided the stated conditions are
 met.
  This License explicitly affirms your unlimited permission to run the unmodifie
d Program.
  The output from running a covered work is covered by this License only
 if the output, given its content, constitutes a covered work.
  This License acknowledges your rights of fair use or other equivalent,
 as provided by copyright law.
\end_layout

\begin_layout Verbatim

  You may make, run and propagate covered works that you do not convey,
 without conditions so long as your license otherwise remains in force.
  You may convey covered works to others for the sole purpose of having
 them make modifications exclusively for you, or provide you with facilities
 for running those works, provided that you comply with the terms of this
 License in conveying all material for which you do not control copyright.
  Those thus making or running the covered works for you must do so exclusively
 on your behalf, under your direction and control, on terms that prohibit
 them from making any copies of your copyrighted material outside their
 relationship with you.
\end_layout

\begin_layout Verbatim

  Conveying under any other circumstances is permitted solely under the
 conditions stated below.
  Sublicensing is not allowed; section 10 makes it unnecessary.
\end_layout

\begin_layout Verbatim

  3.
 Protecting Users' Legal Rights From Anti-Circumvention Law.
\end_layout

\begin_layout Verbatim

  No covered work shall be deemed part of an effective technological measure
 under any applicable law fulfilling obligations under article 11 of the
 WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting
 or restricting circumvention of such measures.
\end_layout

\begin_layout Verbatim

  When you convey a covered work, you waive any legal power to forbid circumvent
ion of technological measures to the extent such circumvention is effected
 by exercising rights under this License with respect to the covered work,
 and you disclaim any intention to limit operation or modification of the
 work as a means of enforcing, against the work's users, your or third parties'
 legal rights to forbid circumvention of technological measures.
\end_layout

\begin_layout Verbatim

  4.
 Conveying Verbatim Copies.
\end_layout

\begin_layout Verbatim

  You may convey verbatim copies of the Program's source code as you receive
 it, in any medium, provided that you conspicuously and appropriately publish
 on each copy an appropriate copyright notice; keep intact all notices stating
 that this License and any non-permissive terms added in accord with section
 7 apply to the code; keep intact all notices of the absence of any warranty;
 and give all recipients a copy of this License along with the Program.
\end_layout

\begin_layout Verbatim

  You may charge any price or no price for each copy that you convey, and
 you may offer support or warranty protection for a fee.
\end_layout

\begin_layout Verbatim

  5.
 Conveying Modified Source Versions.
\end_layout

\begin_layout Verbatim

  You may convey a work based on the Program, or the modifications to produce
 it from the Program, in the form of source code under the terms of section
 4, provided that you also meet all of these conditions:
\end_layout

\begin_layout Verbatim

    a) The work must carry prominent notices stating that you modified 
    it, and giving a relevant date.
\end_layout

\begin_layout Verbatim

    b) The work must carry prominent notices stating that it is     released
 under this License and any conditions added under section     7.
  This requirement modifies the requirement in section 4 to     "keep intact
 all notices".
\end_layout

\begin_layout Verbatim

    c) You must license the entire work, as a whole, under this     License
 to anyone who comes into possession of a copy.
  This     License will therefore apply, along with any applicable section
 7     additional terms, to the whole of the work, and all its parts,  
   regardless of how they are packaged.
  This License gives no     permission to license the work in any other
 way, but it does not     invalidate such permission if you have separately
 received it.
\end_layout

\begin_layout Verbatim

    d) If the work has interactive user interfaces, each must display  
   Appropriate Legal Notices; however, if the Program has interactive  
   interfaces that do not display Appropriate Legal Notices, your     work
 need not make them do so.
\end_layout

\begin_layout Verbatim

  A compilation of a covered work with other separate and independent works,
 which are not by their nature extensions of the covered work, and which
 are not combined with it such as to form a larger program, in or on a volume
 of a storage or distribution medium, is called an "aggregate" if the compilatio
n and its resulting copyright are not used to limit the access or legal
 rights of the compilation's users beyond what the individual works permit.
  Inclusion of a covered work in an aggregate does not cause this License
 to apply to the other parts of the aggregate.
\end_layout

\begin_layout Verbatim

  6.
 Conveying Non-Source Forms.
\end_layout

\begin_layout Verbatim

  You may convey a covered work in object code form under the terms of sections
 4 and 5, provided that you also convey the machine-readable Corresponding
 Source under the terms of this License, in one of these ways:
\end_layout

\begin_layout Verbatim

    a) Convey the object code in, or embodied in, a physical product   
  (including a physical distribution medium), accompanied by the     Correspondi
ng Source fixed on a durable physical medium     customarily used for software
 interchange.
\end_layout

\begin_layout Verbatim

    b) Convey the object code in, or embodied in, a physical product   
  (including a physical distribution medium), accompanied by a     written
 offer, valid for at least three years and valid for as     long as you
 offer spare parts or customer support for that product     model, to give
 anyone who possesses the object code either (1) a     copy of the Corresponding
 Source for all the software in the     product that is covered by this
 License, on a durable physical     medium customarily used for software
 interchange, for a price no     more than your reasonable cost of physically
 performing this     conveying of source, or (2) access to copy the    
 Corresponding Source from a network server at no charge.
\end_layout

\begin_layout Verbatim

    c) Convey individual copies of the object code with a copy of the  
   written offer to provide the Corresponding Source.
  This     alternative is allowed only occasionally and noncommercially,
 and     only if you received the object code with such an offer, in accord
     with subsection 6b.
\end_layout

\begin_layout Verbatim

    d) Convey the object code by offering access from a designated     place
 (gratis or for a charge), and offer equivalent access to the     Corresponding
 Source in the same way through the same place at no     further charge.
  You need not require recipients to copy the     Corresponding Source along
 with the object code.
  If the place to     copy the object code is a network server, the Correspondin
g Source     may be on a different server (operated by you or a third party)
     that supports equivalent copying facilities, provided you maintain
     clear directions next to the object code saying where to find the 
    Corresponding Source.
  Regardless of what server hosts the     Corresponding Source, you remain
 obligated to ensure that it is     available for as long as needed to satisfy
 these requirements.
\end_layout

\begin_layout Verbatim

    e) Convey the object code using peer-to-peer transmission, provided
     you inform other peers where the object code and Corresponding    
 Source of the work are being offered to the general public at no     charge
 under subsection 6d.
\end_layout

\begin_layout Verbatim

  A separable portion of the object code, whose source code is excluded
 from the Corresponding Source as a System Library, need not be included
 in conveying the object code work.
\end_layout

\begin_layout Verbatim

  A "User Product" is either (1) a "consumer product", which means any tangible
 personal property which is normally used for personal, family, or household
 purposes, or (2) anything designed or sold for incorporation into a dwelling.
  In determining whether a product is a consumer product, doubtful cases
 shall be resolved in favor of coverage.
  For a particular product received by a particular user, "normally used"
 refers to a typical or common use of that class of product, regardless
 of the status of the particular user or of the way in which the particular
 user actually uses, or expects or is expected to use, the product.
  A product is a consumer product regardless of whether the product has
 substantial commercial, industrial or non-consumer uses, unless such uses
 represent the only significant mode of use of the product.
\end_layout

\begin_layout Verbatim

  "Installation Information" for a User Product means any methods, procedures,
 authorization keys, or other information required to install and execute
 modified versions of a covered work in that User Product from a modified
 version of its Corresponding Source.
  The information must suffice to ensure that the continued functioning
 of the modified object code is in no case prevented or interfered with
 solely because modification has been made.
\end_layout

\begin_layout Verbatim

  If you convey an object code work under this section in, or with, or specifica
lly for use in, a User Product, and the conveying occurs as part of a transactio
n in which the right of possession and use of the User Product is transferred
 to the recipient in perpetuity or for a fixed term (regardless of how the
 transaction is characterized), the Corresponding Source conveyed under
 this section must be accompanied by the Installation Information.
  But this requirement does not apply if neither you nor any third party
 retains the ability to install modified object code on the User Product
 (for example, the work has been installed in ROM).
\end_layout

\begin_layout Verbatim

  The requirement to provide Installation Information does not include a
 requirement to continue to provide support service, warranty, or updates
 for a work that has been modified or installed by the recipient, or for
 the User Product in which it has been modified or installed.
  Access to a network may be denied when the modification itself materially
 and adversely affects the operation of the network or violates the rules
 and protocols for communication across the network.
\end_layout

\begin_layout Verbatim

  Corresponding Source conveyed, and Installation Information provided,
 in accord with this section must be in a format that is publicly documented
 (and with an implementation available to the public in source code form),
 and must require no special password or key for unpacking, reading or copying.
\end_layout

\begin_layout Verbatim

  7.
 Additional Terms.
\end_layout

\begin_layout Verbatim

  "Additional permissions" are terms that supplement the terms of this License
 by making exceptions from one or more of its conditions.
 Additional permissions that are applicable to the entire Program shall
 be treated as though they were included in this License, to the extent
 that they are valid under applicable law.
  If additional permissions apply only to part of the Program, that part
 may be used separately under those permissions, but the entire Program
 remains governed by this License without regard to the additional permissions.
\end_layout

\begin_layout Verbatim

  When you convey a copy of a covered work, you may at your option remove
 any additional permissions from that copy, or from any part of it.
  (Additional permissions may be written to require their own removal in
 certain cases when you modify the work.)  You may place additional permissions
 on material, added by you to a covered work, for which you have or can
 give appropriate copyright permission.
\end_layout

\begin_layout Verbatim

  Notwithstanding any other provision of this License, for material you
 add to a covered work, you may (if authorized by the copyright holders
 of that material) supplement the terms of this License with terms:
\end_layout

\begin_layout Verbatim

    a) Disclaiming warranty or limiting liability differently from the 
    terms of sections 15 and 16 of this License; or
\end_layout

\begin_layout Verbatim

    b) Requiring preservation of specified reasonable legal notices or 
    author attributions in that material or in the Appropriate Legal   
  Notices displayed by works containing it; or
\end_layout

\begin_layout Verbatim

    c) Prohibiting misrepresentation of the origin of that material, or
     requiring that modified versions of such material be marked in    
 reasonable ways as different from the original version; or
\end_layout

\begin_layout Verbatim

    d) Limiting the use for publicity purposes of names of licensors or
     authors of the material; or
\end_layout

\begin_layout Verbatim

    e) Declining to grant rights under trademark law for use of some   
  trade names, trademarks, or service marks; or
\end_layout

\begin_layout Verbatim

    f) Requiring indemnification of licensors and authors of that     material
 by anyone who conveys the material (or modified versions of     it) with
 contractual assumptions of liability to the recipient, for     any liability
 that these contractual assumptions directly impose on     those licensors
 and authors.
\end_layout

\begin_layout Verbatim

  All other non-permissive additional terms are considered "further restrictions
" within the meaning of section 10.
  If the Program as you received it, or any part of it, contains a notice
 stating that it is governed by this License along with a term that is a
 further restriction, you may remove that term.
  If a license document contains a further restriction but permits relicensing
 or conveying under this License, you may add to a covered work material
 governed by the terms of that license document, provided that the further
 restriction does not survive such relicensing or conveying.
\end_layout

\begin_layout Verbatim

  If you add terms to a covered work in accord with this section, you must
 place, in the relevant source files, a statement of the additional terms
 that apply to those files, or a notice indicating where to find the applicable
 terms.
\end_layout

\begin_layout Verbatim

  Additional terms, permissive or non-permissive, may be stated in the form
 of a separately written license, or stated as exceptions; the above requirement
s apply either way.
\end_layout

\begin_layout Verbatim

  8.
 Termination.
\end_layout

\begin_layout Verbatim

  You may not propagate or modify a covered work except as expressly provided
 under this License.
  Any attempt otherwise to propagate or modify it is void, and will automaticall
y terminate your rights under this License (including any patent licenses
 granted under the third paragraph of section 11).
\end_layout

\begin_layout Verbatim

  However, if you cease all violation of this License, then your license
 from a particular copyright holder is reinstated (a) provisionally, unless
 and until the copyright holder explicitly and finally terminates your license,
 and (b) permanently, if the copyright holder fails to notify you of the
 violation by some reasonable means prior to 60 days after the cessation.
\end_layout

\begin_layout Verbatim

  Moreover, your license from a particular copyright holder is reinstated
 permanently if the copyright holder notifies you of the violation by some
 reasonable means, this is the first time you have received notice of violation
 of this License (for any work) from that copyright holder, and you cure
 the violation prior to 30 days after your receipt of the notice.
\end_layout

\begin_layout Verbatim

  Termination of your rights under this section does not terminate the licenses
 of parties who have received copies or rights from you under this License.
  If your rights have been terminated and not permanently reinstated, you
 do not qualify to receive new licenses for the same material under section
 10.
\end_layout

\begin_layout Verbatim

  9.
 Acceptance Not Required for Having Copies.
\end_layout

\begin_layout Verbatim

  You are not required to accept this License in order to receive or run
 a copy of the Program.
  Ancillary propagation of a covered work occurring solely as a consequence
 of using peer-to-peer transmission to receive a copy likewise does not
 require acceptance.
  However, nothing other than this License grants you permission to propagate
 or modify any covered work.
  These actions infringe copyright if you do not accept this License.
  Therefore, by modifying or propagating a covered work, you indicate your
 acceptance of this License to do so.
\end_layout

\begin_layout Verbatim

  10.
 Automatic Licensing of Downstream Recipients.
\end_layout

\begin_layout Verbatim

  Each time you convey a covered work, the recipient automatically receives
 a license from the original licensors, to run, modify and propagate that
 work, subject to this License.
  You are not responsible for enforcing compliance by third parties with
 this License.
\end_layout

\begin_layout Verbatim

  An "entity transaction" is a transaction transferring control of an organizati
on, or substantially all assets of one, or subdividing an organization,
 or merging organizations.
  If propagation of a covered work results from an entity transaction, each
 party to that transaction who receives a copy of the work also receives
 whatever licenses to the work the party's predecessor in interest had or
 could give under the previous paragraph, plus a right to possession of
 the Corresponding Source of the work from the predecessor in interest,
 if the predecessor has it or can get it with reasonable efforts.
\end_layout

\begin_layout Verbatim

  You may not impose any further restrictions on the exercise of the rights
 granted or affirmed under this License.
  For example, you may not impose a license fee, royalty, or other charge
 for exercise of rights granted under this License, and you may not initiate
 litigation (including a cross-claim or counterclaim in a lawsuit) alleging
 that any patent claim is infringed by making, using, selling, offering
 for sale, or importing the Program or any portion of it.
\end_layout

\begin_layout Verbatim

  11.
 Patents.
\end_layout

\begin_layout Verbatim

  A "contributor" is a copyright holder who authorizes use under this License
 of the Program or a work on which the Program is based.
  The work thus licensed is called the contributor's "contributor version".
\end_layout

\begin_layout Verbatim

  A contributor's "essential patent claims" are all patent claims owned
 or controlled by the contributor, whether already acquired or hereafter
 acquired, that would be infringed by some manner, permitted by this License,
 of making, using, or selling its contributor version, but do not include
 claims that would be infringed only as a consequence of further modification
 of the contributor version.
  For purposes of this definition, "control" includes the right to grant
 patent sublicenses in a manner consistent with the requirements of this
 License.
\end_layout

\begin_layout Verbatim

  Each contributor grants you a non-exclusive, worldwide, royalty-free patent
 license under the contributor's essential patent claims, to make, use,
 sell, offer for sale, import and otherwise run, modify and propagate the
 contents of its contributor version.
\end_layout

\begin_layout Verbatim

  In the following three paragraphs, a "patent license" is any express agreement
 or commitment, however denominated, not to enforce a patent (such as an
 express permission to practice a patent or covenant not to sue for patent
 infringement).
  To "grant" such a patent license to a party means to make such an agreement
 or commitment not to enforce a patent against the party.
\end_layout

\begin_layout Verbatim

  If you convey a covered work, knowingly relying on a patent license, and
 the Corresponding Source of the work is not available for anyone to copy,
 free of charge and under the terms of this License, through a publicly
 available network server or other readily accessible means, then you must
 either (1) cause the Corresponding Source to be so available, or (2) arrange
 to deprive yourself of the benefit of the patent license for this particular
 work, or (3) arrange, in a manner consistent with the requirements of this
 License, to extend the patent license to downstream recipients.
  "Knowingly relying" means you have actual knowledge that, but for the
 patent license, your conveying the covered work in a country, or your recipient
's use of the covered work in a country, would infringe one or more identifiable
 patents in that country that you have reason to believe are valid.
\end_layout

\begin_layout Verbatim

  If, pursuant to or in connection with a single transaction or arrangement,
 you convey, or propagate by procuring conveyance of, a covered work, and
 grant a patent license to some of the parties receiving the covered work
 authorizing them to use, propagate, modify or convey a specific copy of
 the covered work, then the patent license you grant is automatically extended
 to all recipients of the covered work and works based on it.
\end_layout

\begin_layout Verbatim

  A patent license is "discriminatory" if it does not include within the
 scope of its coverage, prohibits the exercise of, or is conditioned on
 the non-exercise of one or more of the rights that are specifically granted
 under this License.
  You may not convey a covered work if you are a party to an arrangement
 with a third party that is in the business of distributing software, under
 which you make payment to the third party based on the extent of your activity
 of conveying the work, and under which the third party grants, to any of
 the parties who would receive the covered work from you, a discriminatory
 patent license (a) in connection with copies of the covered work conveyed
 by you (or copies made from those copies), or (b) primarily for and in
 connection with specific products or compilations that contain the covered
 work, unless you entered into that arrangement, or that patent license
 was granted, prior to 28 March 2007.
\end_layout

\begin_layout Verbatim

  Nothing in this License shall be construed as excluding or limiting any
 implied license or other defenses to infringement that may otherwise be
 available to you under applicable patent law.
\end_layout

\begin_layout Verbatim

  12.
 No Surrender of Others' Freedom.
\end_layout

\begin_layout Verbatim

  If conditions are imposed on you (whether by court order, agreement or
 otherwise) that contradict the conditions of this License, they do not
 excuse you from the conditions of this License.
  If you cannot convey a covered work so as to satisfy simultaneously your
 obligations under this License and any other pertinent obligations, then
 as a consequence you may not convey it at all.
  For example, if you agree to terms that obligate you to collect a royalty
 for further conveying from those to whom you convey the Program, the only
 way you could satisfy both those terms and this License would be to refrain
 entirely from conveying the Program.
\end_layout

\begin_layout Verbatim

  13.
 Use with the GNU Affero General Public License.
\end_layout

\begin_layout Verbatim

  Notwithstanding any other provision of this License, you have permission
 to link or combine any covered work with a work licensed under version
 3 of the GNU Affero General Public License into a single combined work,
 and to convey the resulting work.
  The terms of this License will continue to apply to the part which is
 the covered work, but the special requirements of the GNU Affero General
 Public License, section 13, concerning interaction through a network will
 apply to the combination as such.
\end_layout

\begin_layout Verbatim

  14.
 Revised Versions of this License.
\end_layout

\begin_layout Verbatim

  The Free Software Foundation may publish revised and/or new versions of
 the GNU General Public License from time to time.
  Such new versions will be similar in spirit to the present version, but
 may differ in detail to address new problems or concerns.
\end_layout

\begin_layout Verbatim

  Each version is given a distinguishing version number.
  If the Program specifies that a certain numbered version of the GNU General
 Public License "or any later version" applies to it, you have the option
 of following the terms and conditions either of that numbered version or
 of any later version published by the Free Software Foundation.
  If the Program does not specify a version number of the GNU General Public
 License, you may choose any version ever published by the Free Software
 Foundation.
\end_layout

\begin_layout Verbatim

  If the Program specifies that a proxy can decide which future versions
 of the GNU General Public License can be used, that proxy's public statement
 of acceptance of a version permanently authorizes you to choose that version
 for the Program.
\end_layout

\begin_layout Verbatim

  Later license versions may give you additional or different permissions.
  However, no additional obligations are imposed on any author or copyright
 holder as a result of your choosing to follow a later version.
\end_layout

\begin_layout Verbatim

  15.
 Disclaimer of Warranty.
\end_layout

\begin_layout Verbatim

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
 LAW.
  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
 PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
 EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH
 YOU.
  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
 SERVICING, REPAIR OR CORRECTION.
\end_layout

\begin_layout Verbatim

  16.
 Limitation of Liability.
\end_layout

\begin_layout Verbatim

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
 WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
 THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING
 ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF
 THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS
 OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
 THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
 EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY
 OF SUCH DAMAGES.
\end_layout

\begin_layout Verbatim

  17.
 Interpretation of Sections 15 and 16.
\end_layout

\begin_layout Verbatim

  If the disclaimer of warranty and limitation of liability provided above
 cannot be given local legal effect according to their terms, reviewing
 courts shall apply local law that most closely approximates an absolute
 waiver of all civil liability in connection with the Program, unless a
 warranty or assumption of liability accompanies a copy of the Program in
 return for a fee.
\end_layout

\begin_layout Verbatim

                     END OF TERMS AND CONDITIONS
\end_layout

\begin_layout Verbatim

            How to Apply These Terms to Your New Programs
\end_layout

\begin_layout Verbatim

  If you develop a new program, and you want it to be of the greatest possible
 use to the public, the best way to achieve this is to make it free software
 which everyone can redistribute and change under these terms.
\end_layout

\begin_layout Verbatim

  To do so, attach the following notices to the program.
  It is safest to attach them to the start of each source file to most effective
ly state the exclusion of warranty; and each file should have at least the
 "copyright" line and a pointer to where the full notice is found.
\end_layout

\begin_layout Verbatim

    <one line to give the program's name and a brief idea of what it does.>
     Copyright (C) <year>  <name of author>
\end_layout

\begin_layout Verbatim

    This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or 
    (at your option) any later version.
\end_layout

\begin_layout Verbatim

    This program is distributed in the hope that it will be useful,    
 but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABIL
ITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the     GNU General Public License for more details.
\end_layout

\begin_layout Verbatim

    You should have received a copy of the GNU General Public License  
   along with this program.
  If not, see <https://www.gnu.org/licenses/>.
\end_layout

\begin_layout Verbatim

Also add information on how to contact you by electronic and paper mail.
\end_layout

\begin_layout Verbatim

  If the program does terminal interaction, make it output a short notice
 like this when it starts in an interactive mode:
\end_layout

\begin_layout Verbatim

    <program>  Copyright (C) <year>  <name of author>     This program comes
 with ABSOLUTELY NO WARRANTY; for details type `show w'.
     This is free software, and you are welcome to redistribute it     under
 certain conditions; type `show c' for details.
\end_layout

\begin_layout Verbatim

The hypothetical commands `show w' and `show c' should show the appropriate
 parts of the General Public License.
  Of course, your program's commands might be different; for a GUI interface,
 you would use an "about box".
\end_layout

\begin_layout Verbatim

  You should also get your employer (if you work as a programmer) or school,
 if any, to sign a "copyright disclaimer" for the program, if necessary.
 For more information on this, and how to apply and follow the GNU GPL,
 see <https://www.gnu.org/licenses/>.
\end_layout

\begin_layout Verbatim

  The GNU General Public License does not permit incorporating your program
 into proprietary programs.
  If your program is a subroutine library, you may consider it more useful
 to permit linking proprietary applications with the library.
  If this is what you want to do, use the GNU Lesser General Public License
 instead of this License.
  But first, please read <https://www.gnu.org/licenses/why-not-lgpl.html>.
\end_layout

\begin_layout Subsection
GNU LGPL 3.0
\end_layout

\begin_layout Verbatim

                   GNU LESSER GENERAL PUBLIC LICENSE                   
     Version 3, 29 June 2007
\end_layout

\begin_layout Verbatim

 Copyright (C) 2007 Free Software Foundation, Inc.
 <https://fsf.org/>  Everyone is permitted to copy and distribute verbatim
 copies  of this license document, but changing it is not allowed.
\end_layout

\begin_layout Verbatim

  This version of the GNU Lesser General Public License incorporates the
 terms and conditions of version 3 of the GNU General Public License, supplement
ed by the additional permissions listed below.
\end_layout

\begin_layout Verbatim

  0.
 Additional Definitions.
\end_layout

\begin_layout Verbatim

  As used herein, "this License" refers to version 3 of the GNU Lesser General
 Public License, and the "GNU GPL" refers to version 3 of the GNU General
 Public License.
\end_layout

\begin_layout Verbatim

  "The Library" refers to a covered work governed by this License, other
 than an Application or a Combined Work as defined below.
\end_layout

\begin_layout Verbatim

  An "Application" is any work that makes use of an interface provided by
 the Library, but which is not otherwise based on the Library.
 Defining a subclass of a class defined by the Library is deemed a mode
 of using an interface provided by the Library.
\end_layout

\begin_layout Verbatim

  A "Combined Work" is a work produced by combining or linking an Application
 with the Library.
  The particular version of the Library with which the Combined Work was
 made is also called the "Linked Version".
\end_layout

\begin_layout Verbatim

  The "Minimal Corresponding Source" for a Combined Work means the Corresponding
 Source for the Combined Work, excluding any source code for portions of
 the Combined Work that, considered in isolation, are based on the Application,
 and not on the Linked Version.
\end_layout

\begin_layout Verbatim

  The "Corresponding Application Code" for a Combined Work means the object
 code and/or source code for the Application, including any data and utility
 programs needed for reproducing the Combined Work from the Application,
 but excluding the System Libraries of the Combined Work.
\end_layout

\begin_layout Verbatim

  1.
 Exception to Section 3 of the GNU GPL.
\end_layout

\begin_layout Verbatim

  You may convey a covered work under sections 3 and 4 of this License without
 being bound by section 3 of the GNU GPL.
\end_layout

\begin_layout Verbatim

  2.
 Conveying Modified Versions.
\end_layout

\begin_layout Verbatim

  If you modify a copy of the Library, and, in your modifications, a facility
 refers to a function or data to be supplied by an Application that uses
 the facility (other than as an argument passed when the facility is invoked),
 then you may convey a copy of the modified version:
\end_layout

\begin_layout Verbatim

   a) under this License, provided that you make a good faith effort to
    ensure that, in the event an Application does not supply the    function
 or data, the facility still operates, and performs    whatever part of
 its purpose remains meaningful, or
\end_layout

\begin_layout Verbatim

   b) under the GNU GPL, with none of the additional permissions of    this
 License applicable to that copy.
\end_layout

\begin_layout Verbatim

  3.
 Object Code Incorporating Material from Library Header Files.
\end_layout

\begin_layout Verbatim

  The object code form of an Application may incorporate material from a
 header file that is part of the Library.
  You may convey such object code under terms of your choice, provided that,
 if the incorporated material is not limited to numerical parameters, data
 structure layouts and accessors, or small macros, inline functions and
 templates (ten or fewer lines in length), you do both of the following:
\end_layout

\begin_layout Verbatim

   a) Give prominent notice with each copy of the object code that the 
   Library is used in it and that the Library and its use are    covered
 by this License.
\end_layout

\begin_layout Verbatim

   b) Accompany the object code with a copy of the GNU GPL and this license
    document.
\end_layout

\begin_layout Verbatim

  4.
 Combined Works.
\end_layout

\begin_layout Verbatim

  You may convey a Combined Work under terms of your choice that, taken
 together, effectively do not restrict modification of the portions of the
 Library contained in the Combined Work and reverse engineering for debugging
 such modifications, if you also do each of the following:
\end_layout

\begin_layout Verbatim

   a) Give prominent notice with each copy of the Combined Work that   
 the Library is used in it and that the Library and its use are    covered
 by this License.
\end_layout

\begin_layout Verbatim

   b) Accompany the Combined Work with a copy of the GNU GPL and this license
    document.
\end_layout

\begin_layout Verbatim

   c) For a Combined Work that displays copyright notices during    execution,
 include the copyright notice for the Library among    these notices, as
 well as a reference directing the user to the    copies of the GNU GPL
 and this license document.
\end_layout

\begin_layout Verbatim

   d) Do one of the following:
\end_layout

\begin_layout Verbatim

       0) Convey the Minimal Corresponding Source under the terms of this
        License, and the Corresponding Application Code in a form      
  suitable for, and under terms that permit, the user to        recombine
 or relink the Application with a modified version of        the Linked
 Version to produce a modified Combined Work, in the        manner specified
 by section 6 of the GNU GPL for conveying        Corresponding Source.
\end_layout

\begin_layout Verbatim

       1) Use a suitable shared library mechanism for linking with the 
       Library.
  A suitable mechanism is one that (a) uses at run time        a copy of
 the Library already present on the user's computer        system, and (b)
 will operate properly with a modified version        of the Library that
 is interface-compatible with the Linked        Version.
\end_layout

\begin_layout Verbatim

   e) Provide Installation Information, but only if you would otherwise
    be required to provide such information under section 6 of the    GNU
 GPL, and only to the extent that such information is    necessary to install
 and execute a modified version of the    Combined Work produced by recombining
 or relinking the    Application with a modified version of the Linked Version.
 (If    you use option 4d0, the Installation Information must accompany
    the Minimal Corresponding Source and Corresponding Application    Code.
 If you use option 4d1, you must provide the Installation    Information
 in the manner specified by section 6 of the GNU GPL    for conveying Correspond
ing Source.)
\end_layout

\begin_layout Verbatim

  5.
 Combined Libraries.
\end_layout

\begin_layout Verbatim

  You may place library facilities that are a work based on the Library
 side by side in a single library together with other library facilities
 that are not Applications and are not covered by this License, and convey
 such a combined library under terms of your choice, if you do both of the
 following:
\end_layout

\begin_layout Verbatim

   a) Accompany the combined library with a copy of the same work based
    on the Library, uncombined with any other library facilities,    conveyed
 under the terms of this License.
\end_layout

\begin_layout Verbatim

   b) Give prominent notice with the combined library that part of it  
  is a work based on the Library, and explaining where to find the    accompanyi
ng uncombined form of the same work.
\end_layout

\begin_layout Verbatim

  6.
 Revised Versions of the GNU Lesser General Public License.
\end_layout

\begin_layout Verbatim

  The Free Software Foundation may publish revised and/or new versions of
 the GNU Lesser General Public License from time to time.
 Such new versions will be similar in spirit to the present version, but
 may differ in detail to address new problems or concerns.
\end_layout

\begin_layout Verbatim

  Each version is given a distinguishing version number.
 If the Library as you received it specifies that a certain numbered version
 of the GNU Lesser General Public License "or any later version" applies
 to it, you have the option of following the terms and conditions either
 of that published version or of any later version published by the Free
 Software Foundation.
 If the Library as you received it does not specify a version number of
 the GNU Lesser General Public License, you may choose any version of the
 GNU Lesser General Public License ever published by the Free Software Foundatio
n.
\end_layout

\begin_layout Verbatim

  If the Library as you received it specifies that a proxy can decide whether
 future versions of the GNU Lesser General Public License shall apply, that
 proxy's public statement of acceptance of any version is permanent authorizatio
n for you to choose that version for the Library.
\end_layout

\begin_layout Subsection
GNU AGPL 3.0
\end_layout

\begin_layout Verbatim

GNU AFFERO GENERAL PUBLIC LICENSE                        Version 3, 19 November
 2007
\end_layout

\begin_layout Verbatim

 Copyright (C) 2007 Free Software Foundation, Inc.
 <https://fsf.org/>  Everyone is permitted to copy and distribute verbatim
 copies  of this license document, but changing it is not allowed.
\end_layout

\begin_layout Verbatim

                            Preamble
\end_layout

\begin_layout Verbatim

  The GNU Affero General Public License is a free, copyleft license for
 software and other kinds of works, specifically designed to ensure cooperation
 with the community in the case of network server software.
\end_layout

\begin_layout Verbatim

  The licenses for most software and other practical works are designed
 to take away your freedom to share and change the works.
  By contrast, our General Public Licenses are intended to guarantee your
 freedom to share and change all versions of a program--to make sure it
 remains free software for all its users.
\end_layout

\begin_layout Verbatim

  When we speak of free software, we are referring to freedom, not price.
  Our General Public Licenses are designed to make sure that you have the
 freedom to distribute copies of free software (and charge for them if you
 wish), that you receive source code or can get it if you want it, that
 you can change the software or use pieces of it in new free programs, and
 that you know you can do these things.
\end_layout

\begin_layout Verbatim

  Developers that use our General Public Licenses protect your rights with
 two steps: (1) assert copyright on the software, and (2) offer you this
 License which gives you legal permission to copy, distribute and/or modify
 the software.
\end_layout

\begin_layout Verbatim

  A secondary benefit of defending all users' freedom is that improvements
 made in alternate versions of the program, if they receive widespread use,
 become available for other developers to incorporate.
  Many developers of free software are heartened and encouraged by the resulting
 cooperation.
  However, in the case of software used on network servers, this result
 may fail to come about.
 The GNU General Public License permits making a modified version and letting
 the public access it on a server without ever releasing its source code
 to the public.
\end_layout

\begin_layout Verbatim

  The GNU Affero General Public License is designed specifically to ensure
 that, in such cases, the modified source code becomes available to the
 community.
  It requires the operator of a network server to provide the source code
 of the modified version running there to the users of that server.
  Therefore, public use of a modified version, on a publicly accessible
 server, gives the public access to the source code of the modified version.
\end_layout

\begin_layout Verbatim

  An older license, called the Affero General Public License and published
 by Affero, was designed to accomplish similar goals.
  This is a different license, not a version of the Affero GPL, but Affero
 has released a new version of the Affero GPL which permits relicensing
 under this license.
\end_layout

\begin_layout Verbatim

  The precise terms and conditions for copying, distribution and modification
 follow.
\end_layout

\begin_layout Verbatim

                       TERMS AND CONDITIONS
\end_layout

\begin_layout Verbatim

  0.
 Definitions.
\end_layout

\begin_layout Verbatim

  "This License" refers to version 3 of the GNU Affero General Public License.
\end_layout

\begin_layout Verbatim

  "Copyright" also means copyright-like laws that apply to other kinds of
 works, such as semiconductor masks.
\end_layout

\begin_layout Verbatim

  "The Program" refers to any copyrightable work licensed under this License.
  Each licensee is addressed as "you".
  "Licensees" and "recipients" may be individuals or organizations.
\end_layout

\begin_layout Verbatim

  To "modify" a work means to copy from or adapt all or part of the work
 in a fashion requiring copyright permission, other than the making of an
 exact copy.
  The resulting work is called a "modified version" of the earlier work
 or a work "based on" the earlier work.
\end_layout

\begin_layout Verbatim

  A "covered work" means either the unmodified Program or a work based on
 the Program.
\end_layout

\begin_layout Verbatim

  To "propagate" a work means to do anything with it that, without permission,
 would make you directly or secondarily liable for infringement under applicable
 copyright law, except executing it on a computer or modifying a private
 copy.
  Propagation includes copying, distribution (with or without modification),
 making available to the public, and in some countries other activities
 as well.
\end_layout

\begin_layout Verbatim

  To "convey" a work means any kind of propagation that enables other parties
 to make or receive copies.
  Mere interaction with a user through a computer network, with no transfer
 of a copy, is not conveying.
\end_layout

\begin_layout Verbatim

  An interactive user interface displays "Appropriate Legal Notices" to
 the extent that it includes a convenient and prominently visible feature
 that (1) displays an appropriate copyright notice, and (2) tells the user
 that there is no warranty for the work (except to the extent that warranties
 are provided), that licensees may convey the work under this License, and
 how to view a copy of this License.
  If the interface presents a list of user commands or options, such as
 a menu, a prominent item in the list meets this criterion.
\end_layout

\begin_layout Verbatim

  1.
 Source Code.
\end_layout

\begin_layout Verbatim

  The "source code" for a work means the preferred form of the work for
 making modifications to it.
  "Object code" means any non-source form of a work.
\end_layout

\begin_layout Verbatim

  A "Standard Interface" means an interface that either is an official standard
 defined by a recognized standards body, or, in the case of interfaces specified
 for a particular programming language, one that is widely used among developers
 working in that language.
\end_layout

\begin_layout Verbatim

  The "System Libraries" of an executable work include anything, other than
 the work as a whole, that (a) is included in the normal form of packaging
 a Major Component, but which is not part of that Major Component, and (b)
 serves only to enable use of the work with that Major Component, or to
 implement a Standard Interface for which an implementation is available
 to the public in source code form.
  A "Major Component", in this context, means a major essential component
 (kernel, window system, and so on) of the specific operating system (if
 any) on which the executable work runs, or a compiler used to produce the
 work, or an object code interpreter used to run it.
\end_layout

\begin_layout Verbatim

  The "Corresponding Source" for a work in object code form means all the
 source code needed to generate, install, and (for an executable work) run
 the object code and to modify the work, including scripts to control those
 activities.
  However, it does not include the work's System Libraries, or general-purpose
 tools or generally available free programs which are used unmodified in
 performing those activities but which are not part of the work.
  For example, Corresponding Source includes interface definition files
 associated with source files for the work, and the source code for shared
 libraries and dynamically linked subprograms that the work is specifically
 designed to require, such as by intimate data communication or control
 flow between those subprograms and other parts of the work.
\end_layout

\begin_layout Verbatim

  The Corresponding Source need not include anything that users can regenerate
 automatically from other parts of the Corresponding Source.
\end_layout

\begin_layout Verbatim

  The Corresponding Source for a work in source code form is that same work.
\end_layout

\begin_layout Verbatim

  2.
 Basic Permissions.
\end_layout

\begin_layout Verbatim

  All rights granted under this License are granted for the term of copyright
 on the Program, and are irrevocable provided the stated conditions are
 met.
  This License explicitly affirms your unlimited permission to run the unmodifie
d Program.
  The output from running a covered work is covered by this License only
 if the output, given its content, constitutes a covered work.
  This License acknowledges your rights of fair use or other equivalent,
 as provided by copyright law.
\end_layout

\begin_layout Verbatim

  You may make, run and propagate covered works that you do not convey,
 without conditions so long as your license otherwise remains in force.
  You may convey covered works to others for the sole purpose of having
 them make modifications exclusively for you, or provide you with facilities
 for running those works, provided that you comply with the terms of this
 License in conveying all material for which you do not control copyright.
  Those thus making or running the covered works for you must do so exclusively
 on your behalf, under your direction and control, on terms that prohibit
 them from making any copies of your copyrighted material outside their
 relationship with you.
\end_layout

\begin_layout Verbatim

  Conveying under any other circumstances is permitted solely under the
 conditions stated below.
  Sublicensing is not allowed; section 10 makes it unnecessary.
\end_layout

\begin_layout Verbatim

  3.
 Protecting Users' Legal Rights From Anti-Circumvention Law.
\end_layout

\begin_layout Verbatim

  No covered work shall be deemed part of an effective technological measure
 under any applicable law fulfilling obligations under article 11 of the
 WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting
 or restricting circumvention of such measures.
\end_layout

\begin_layout Verbatim

  When you convey a covered work, you waive any legal power to forbid circumvent
ion of technological measures to the extent such circumvention is effected
 by exercising rights under this License with respect to the covered work,
 and you disclaim any intention to limit operation or modification of the
 work as a means of enforcing, against the work's users, your or third parties'
 legal rights to forbid circumvention of technological measures.
\end_layout

\begin_layout Verbatim

  4.
 Conveying Verbatim Copies.
\end_layout

\begin_layout Verbatim

  You may convey verbatim copies of the Program's source code as you receive
 it, in any medium, provided that you conspicuously and appropriately publish
 on each copy an appropriate copyright notice; keep intact all notices stating
 that this License and any non-permissive terms added in accord with section
 7 apply to the code; keep intact all notices of the absence of any warranty;
 and give all recipients a copy of this License along with the Program.
\end_layout

\begin_layout Verbatim

  You may charge any price or no price for each copy that you convey, and
 you may offer support or warranty protection for a fee.
\end_layout

\begin_layout Verbatim

  5.
 Conveying Modified Source Versions.
\end_layout

\begin_layout Verbatim

  You may convey a work based on the Program, or the modifications to produce
 it from the Program, in the form of source code under the terms of section
 4, provided that you also meet all of these conditions:
\end_layout

\begin_layout Verbatim

    a) The work must carry prominent notices stating that you modified 
    it, and giving a relevant date.
\end_layout

\begin_layout Verbatim

    b) The work must carry prominent notices stating that it is     released
 under this License and any conditions added under section     7.
  This requirement modifies the requirement in section 4 to     "keep intact
 all notices".
\end_layout

\begin_layout Verbatim

    c) You must license the entire work, as a whole, under this     License
 to anyone who comes into possession of a copy.
  This     License will therefore apply, along with any applicable section
 7     additional terms, to the whole of the work, and all its parts,  
   regardless of how they are packaged.
  This License gives no     permission to license the work in any other
 way, but it does not     invalidate such permission if you have separately
 received it.
\end_layout

\begin_layout Verbatim

    d) If the work has interactive user interfaces, each must display  
   Appropriate Legal Notices; however, if the Program has interactive  
   interfaces that do not display Appropriate Legal Notices, your     work
 need not make them do so.
\end_layout

\begin_layout Verbatim

  A compilation of a covered work with other separate and independent works,
 which are not by their nature extensions of the covered work, and which
 are not combined with it such as to form a larger program, in or on a volume
 of a storage or distribution medium, is called an "aggregate" if the compilatio
n and its resulting copyright are not used to limit the access or legal
 rights of the compilation's users beyond what the individual works permit.
  Inclusion of a covered work in an aggregate does not cause this License
 to apply to the other parts of the aggregate.
\end_layout

\begin_layout Verbatim

  6.
 Conveying Non-Source Forms.
\end_layout

\begin_layout Verbatim

  You may convey a covered work in object code form under the terms of sections
 4 and 5, provided that you also convey the machine-readable Corresponding
 Source under the terms of this License, in one of these ways:
\end_layout

\begin_layout Verbatim

    a) Convey the object code in, or embodied in, a physical product   
  (including a physical distribution medium), accompanied by the     Correspondi
ng Source fixed on a durable physical medium     customarily used for software
 interchange.
\end_layout

\begin_layout Verbatim

    b) Convey the object code in, or embodied in, a physical product   
  (including a physical distribution medium), accompanied by a     written
 offer, valid for at least three years and valid for as     long as you
 offer spare parts or customer support for that product     model, to give
 anyone who possesses the object code either (1) a     copy of the Corresponding
 Source for all the software in the     product that is covered by this
 License, on a durable physical     medium customarily used for software
 interchange, for a price no     more than your reasonable cost of physically
 performing this     conveying of source, or (2) access to copy the    
 Corresponding Source from a network server at no charge.
\end_layout

\begin_layout Verbatim

    c) Convey individual copies of the object code with a copy of the  
   written offer to provide the Corresponding Source.
  This     alternative is allowed only occasionally and noncommercially,
 and     only if you received the object code with such an offer, in accord
     with subsection 6b.
\end_layout

\begin_layout Verbatim

    d) Convey the object code by offering access from a designated     place
 (gratis or for a charge), and offer equivalent access to the     Corresponding
 Source in the same way through the same place at no     further charge.
  You need not require recipients to copy the     Corresponding Source along
 with the object code.
  If the place to     copy the object code is a network server, the Correspondin
g Source     may be on a different server (operated by you or a third party)
     that supports equivalent copying facilities, provided you maintain
     clear directions next to the object code saying where to find the 
    Corresponding Source.
  Regardless of what server hosts the     Corresponding Source, you remain
 obligated to ensure that it is     available for as long as needed to satisfy
 these requirements.
\end_layout

\begin_layout Verbatim

    e) Convey the object code using peer-to-peer transmission, provided
     you inform other peers where the object code and Corresponding    
 Source of the work are being offered to the general public at no     charge
 under subsection 6d.
\end_layout

\begin_layout Verbatim

  A separable portion of the object code, whose source code is excluded
 from the Corresponding Source as a System Library, need not be included
 in conveying the object code work.
\end_layout

\begin_layout Verbatim

  A "User Product" is either (1) a "consumer product", which means any tangible
 personal property which is normally used for personal, family, or household
 purposes, or (2) anything designed or sold for incorporation into a dwelling.
  In determining whether a product is a consumer product, doubtful cases
 shall be resolved in favor of coverage.
  For a particular product received by a particular user, "normally used"
 refers to a typical or common use of that class of product, regardless
 of the status of the particular user or of the way in which the particular
 user actually uses, or expects or is expected to use, the product.
  A product is a consumer product regardless of whether the product has
 substantial commercial, industrial or non-consumer uses, unless such uses
 represent the only significant mode of use of the product.
\end_layout

\begin_layout Verbatim

  "Installation Information" for a User Product means any methods, procedures,
 authorization keys, or other information required to install and execute
 modified versions of a covered work in that User Product from a modified
 version of its Corresponding Source.
  The information must suffice to ensure that the continued functioning
 of the modified object code is in no case prevented or interfered with
 solely because modification has been made.
\end_layout

\begin_layout Verbatim

  If you convey an object code work under this section in, or with, or specifica
lly for use in, a User Product, and the conveying occurs as part of a transactio
n in which the right of possession and use of the User Product is transferred
 to the recipient in perpetuity or for a fixed term (regardless of how the
 transaction is characterized), the Corresponding Source conveyed under
 this section must be accompanied by the Installation Information.
  But this requirement does not apply if neither you nor any third party
 retains the ability to install modified object code on the User Product
 (for example, the work has been installed in ROM).
\end_layout

\begin_layout Verbatim

  The requirement to provide Installation Information does not include a
 requirement to continue to provide support service, warranty, or updates
 for a work that has been modified or installed by the recipient, or for
 the User Product in which it has been modified or installed.
  Access to a network may be denied when the modification itself materially
 and adversely affects the operation of the network or violates the rules
 and protocols for communication across the network.
\end_layout

\begin_layout Verbatim

  Corresponding Source conveyed, and Installation Information provided,
 in accord with this section must be in a format that is publicly documented
 (and with an implementation available to the public in source code form),
 and must require no special password or key for unpacking, reading or copying.
\end_layout

\begin_layout Verbatim

  7.
 Additional Terms.
\end_layout

\begin_layout Verbatim

  "Additional permissions" are terms that supplement the terms of this License
 by making exceptions from one or more of its conditions.
 Additional permissions that are applicable to the entire Program shall
 be treated as though they were included in this License, to the extent
 that they are valid under applicable law.
  If additional permissions apply only to part of the Program, that part
 may be used separately under those permissions, but the entire Program
 remains governed by this License without regard to the additional permissions.
\end_layout

\begin_layout Verbatim

  When you convey a copy of a covered work, you may at your option remove
 any additional permissions from that copy, or from any part of it.
  (Additional permissions may be written to require their own removal in
 certain cases when you modify the work.)  You may place additional permissions
 on material, added by you to a covered work, for which you have or can
 give appropriate copyright permission.
\end_layout

\begin_layout Verbatim

  Notwithstanding any other provision of this License, for material you
 add to a covered work, you may (if authorized by the copyright holders
 of that material) supplement the terms of this License with terms:
\end_layout

\begin_layout Verbatim

    a) Disclaiming warranty or limiting liability differently from the 
    terms of sections 15 and 16 of this License; or
\end_layout

\begin_layout Verbatim

    b) Requiring preservation of specified reasonable legal notices or 
    author attributions in that material or in the Appropriate Legal   
  Notices displayed by works containing it; or
\end_layout

\begin_layout Verbatim

    c) Prohibiting misrepresentation of the origin of that material, or
     requiring that modified versions of such material be marked in    
 reasonable ways as different from the original version; or
\end_layout

\begin_layout Verbatim

    d) Limiting the use for publicity purposes of names of licensors or
     authors of the material; or
\end_layout

\begin_layout Verbatim

    e) Declining to grant rights under trademark law for use of some   
  trade names, trademarks, or service marks; or
\end_layout

\begin_layout Verbatim

    f) Requiring indemnification of licensors and authors of that     material
 by anyone who conveys the material (or modified versions of     it) with
 contractual assumptions of liability to the recipient, for     any liability
 that these contractual assumptions directly impose on     those licensors
 and authors.
\end_layout

\begin_layout Verbatim

  All other non-permissive additional terms are considered "further restrictions
" within the meaning of section 10.
  If the Program as you received it, or any part of it, contains a notice
 stating that it is governed by this License along with a term that is a
 further restriction, you may remove that term.
  If a license document contains a further restriction but permits relicensing
 or conveying under this License, you may add to a covered work material
 governed by the terms of that license document, provided that the further
 restriction does not survive such relicensing or conveying.
\end_layout

\begin_layout Verbatim

  If you add terms to a covered work in accord with this section, you must
 place, in the relevant source files, a statement of the additional terms
 that apply to those files, or a notice indicating where to find the applicable
 terms.
\end_layout

\begin_layout Verbatim

  Additional terms, permissive or non-permissive, may be stated in the form
 of a separately written license, or stated as exceptions; the above requirement
s apply either way.
\end_layout

\begin_layout Verbatim

  8.
 Termination.
\end_layout

\begin_layout Verbatim

  You may not propagate or modify a covered work except as expressly provided
 under this License.
  Any attempt otherwise to propagate or modify it is void, and will automaticall
y terminate your rights under this License (including any patent licenses
 granted under the third paragraph of section 11).
\end_layout

\begin_layout Verbatim

  However, if you cease all violation of this License, then your license
 from a particular copyright holder is reinstated (a) provisionally, unless
 and until the copyright holder explicitly and finally terminates your license,
 and (b) permanently, if the copyright holder fails to notify you of the
 violation by some reasonable means prior to 60 days after the cessation.
\end_layout

\begin_layout Verbatim

  Moreover, your license from a particular copyright holder is reinstated
 permanently if the copyright holder notifies you of the violation by some
 reasonable means, this is the first time you have received notice of violation
 of this License (for any work) from that copyright holder, and you cure
 the violation prior to 30 days after your receipt of the notice.
\end_layout

\begin_layout Verbatim

  Termination of your rights under this section does not terminate the licenses
 of parties who have received copies or rights from you under this License.
  If your rights have been terminated and not permanently reinstated, you
 do not qualify to receive new licenses for the same material under section
 10.
\end_layout

\begin_layout Verbatim

  9.
 Acceptance Not Required for Having Copies.
\end_layout

\begin_layout Verbatim

  You are not required to accept this License in order to receive or run
 a copy of the Program.
  Ancillary propagation of a covered work occurring solely as a consequence
 of using peer-to-peer transmission to receive a copy likewise does not
 require acceptance.
  However, nothing other than this License grants you permission to propagate
 or modify any covered work.
  These actions infringe copyright if you do not accept this License.
  Therefore, by modifying or propagating a covered work, you indicate your
 acceptance of this License to do so.
\end_layout

\begin_layout Verbatim

  10.
 Automatic Licensing of Downstream Recipients.
\end_layout

\begin_layout Verbatim

  Each time you convey a covered work, the recipient automatically receives
 a license from the original licensors, to run, modify and propagate that
 work, subject to this License.
  You are not responsible for enforcing compliance by third parties with
 this License.
\end_layout

\begin_layout Verbatim

  An "entity transaction" is a transaction transferring control of an organizati
on, or substantially all assets of one, or subdividing an organization,
 or merging organizations.
  If propagation of a covered work results from an entity transaction, each
 party to that transaction who receives a copy of the work also receives
 whatever licenses to the work the party's predecessor in interest had or
 could give under the previous paragraph, plus a right to possession of
 the Corresponding Source of the work from the predecessor in interest,
 if the predecessor has it or can get it with reasonable efforts.
\end_layout

\begin_layout Verbatim

  You may not impose any further restrictions on the exercise of the rights
 granted or affirmed under this License.
  For example, you may not impose a license fee, royalty, or other charge
 for exercise of rights granted under this License, and you may not initiate
 litigation (including a cross-claim or counterclaim in a lawsuit) alleging
 that any patent claim is infringed by making, using, selling, offering
 for sale, or importing the Program or any portion of it.
\end_layout

\begin_layout Verbatim

  11.
 Patents.
\end_layout

\begin_layout Verbatim

  A "contributor" is a copyright holder who authorizes use under this License
 of the Program or a work on which the Program is based.
  The work thus licensed is called the contributor's "contributor version".
\end_layout

\begin_layout Verbatim

  A contributor's "essential patent claims" are all patent claims owned
 or controlled by the contributor, whether already acquired or hereafter
 acquired, that would be infringed by some manner, permitted by this License,
 of making, using, or selling its contributor version, but do not include
 claims that would be infringed only as a consequence of further modification
 of the contributor version.
  For purposes of this definition, "control" includes the right to grant
 patent sublicenses in a manner consistent with the requirements of this
 License.
\end_layout

\begin_layout Verbatim

  Each contributor grants you a non-exclusive, worldwide, royalty-free patent
 license under the contributor's essential patent claims, to make, use,
 sell, offer for sale, import and otherwise run, modify and propagate the
 contents of its contributor version.
\end_layout

\begin_layout Verbatim

  In the following three paragraphs, a "patent license" is any express agreement
 or commitment, however denominated, not to enforce a patent (such as an
 express permission to practice a patent or covenant not to sue for patent
 infringement).
  To "grant" such a patent license to a party means to make such an agreement
 or commitment not to enforce a patent against the party.
\end_layout

\begin_layout Verbatim

  If you convey a covered work, knowingly relying on a patent license, and
 the Corresponding Source of the work is not available for anyone to copy,
 free of charge and under the terms of this License, through a publicly
 available network server or other readily accessible means, then you must
 either (1) cause the Corresponding Source to be so available, or (2) arrange
 to deprive yourself of the benefit of the patent license for this particular
 work, or (3) arrange, in a manner consistent with the requirements of this
 License, to extend the patent license to downstream recipients.
  "Knowingly relying" means you have actual knowledge that, but for the
 patent license, your conveying the covered work in a country, or your recipient
's use of the covered work in a country, would infringe one or more identifiable
 patents in that country that you have reason to believe are valid.
\end_layout

\begin_layout Verbatim

  If, pursuant to or in connection with a single transaction or arrangement,
 you convey, or propagate by procuring conveyance of, a covered work, and
 grant a patent license to some of the parties receiving the covered work
 authorizing them to use, propagate, modify or convey a specific copy of
 the covered work, then the patent license you grant is automatically extended
 to all recipients of the covered work and works based on it.
\end_layout

\begin_layout Verbatim

  A patent license is "discriminatory" if it does not include within the
 scope of its coverage, prohibits the exercise of, or is conditioned on
 the non-exercise of one or more of the rights that are specifically granted
 under this License.
  You may not convey a covered work if you are a party to an arrangement
 with a third party that is in the business of distributing software, under
 which you make payment to the third party based on the extent of your activity
 of conveying the work, and under which the third party grants, to any of
 the parties who would receive the covered work from you, a discriminatory
 patent license (a) in connection with copies of the covered work conveyed
 by you (or copies made from those copies), or (b) primarily for and in
 connection with specific products or compilations that contain the covered
 work, unless you entered into that arrangement, or that patent license
 was granted, prior to 28 March 2007.
\end_layout

\begin_layout Verbatim

  Nothing in this License shall be construed as excluding or limiting any
 implied license or other defenses to infringement that may otherwise be
 available to you under applicable patent law.
\end_layout

\begin_layout Verbatim

  12.
 No Surrender of Others' Freedom.
\end_layout

\begin_layout Verbatim

  If conditions are imposed on you (whether by court order, agreement or
 otherwise) that contradict the conditions of this License, they do not
 excuse you from the conditions of this License.
  If you cannot convey a covered work so as to satisfy simultaneously your
 obligations under this License and any other pertinent obligations, then
 as a consequence you may not convey it at all.
  For example, if you agree to terms that obligate you to collect a royalty
 for further conveying from those to whom you convey the Program, the only
 way you could satisfy both those terms and this License would be to refrain
 entirely from conveying the Program.
\end_layout

\begin_layout Verbatim

  13.
 Remote Network Interaction; Use with the GNU General Public License.
\end_layout

\begin_layout Verbatim

  Notwithstanding any other provision of this License, if you modify the
 Program, your modified version must prominently offer all users interacting
 with it remotely through a computer network (if your version supports such
 interaction) an opportunity to receive the Corresponding Source of your
 version by providing access to the Corresponding Source from a network
 server at no charge, through some standard or customary means of facilitating
 copying of software.
  This Corresponding Source shall include the Corresponding Source for any
 work covered by version 3 of the GNU General Public License that is incorporate
d pursuant to the following paragraph.
\end_layout

\begin_layout Verbatim

  Notwithstanding any other provision of this License, you have permission
 to link or combine any covered work with a work licensed under version
 3 of the GNU General Public License into a single combined work, and to
 convey the resulting work.
  The terms of this License will continue to apply to the part which is
 the covered work, but the work with which it is combined will remain governed
 by version 3 of the GNU General Public License.
\end_layout

\begin_layout Verbatim

  14.
 Revised Versions of this License.
\end_layout

\begin_layout Verbatim

  The Free Software Foundation may publish revised and/or new versions of
 the GNU Affero General Public License from time to time.
  Such new versions will be similar in spirit to the present version, but
 may differ in detail to address new problems or concerns.
\end_layout

\begin_layout Verbatim

  Each version is given a distinguishing version number.
  If the Program specifies that a certain numbered version of the GNU Affero
 General Public License "or any later version" applies to it, you have the
 option of following the terms and conditions either of that numbered version
 or of any later version published by the Free Software Foundation.
  If the Program does not specify a version number of the GNU Affero General
 Public License, you may choose any version ever published by the Free Software
 Foundation.
\end_layout

\begin_layout Verbatim

  If the Program specifies that a proxy can decide which future versions
 of the GNU Affero General Public License can be used, that proxy's public
 statement of acceptance of a version permanently authorizes you to choose
 that version for the Program.
\end_layout

\begin_layout Verbatim

  Later license versions may give you additional or different permissions.
  However, no additional obligations are imposed on any author or copyright
 holder as a result of your choosing to follow a later version.
\end_layout

\begin_layout Verbatim

  15.
 Disclaimer of Warranty.
\end_layout

\begin_layout Verbatim

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
 LAW.
  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
 PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
 EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH
 YOU.
  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
 SERVICING, REPAIR OR CORRECTION.
\end_layout

\begin_layout Verbatim

  16.
 Limitation of Liability.
\end_layout

\begin_layout Verbatim

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
 WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
 THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING
 ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF
 THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS
 OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
 THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
 EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY
 OF SUCH DAMAGES.
\end_layout

\begin_layout Verbatim

  17.
 Interpretation of Sections 15 and 16.
\end_layout

\begin_layout Verbatim

  If the disclaimer of warranty and limitation of liability provided above
 cannot be given local legal effect according to their terms, reviewing
 courts shall apply local law that most closely approximates an absolute
 waiver of all civil liability in connection with the Program, unless a
 warranty or assumption of liability accompanies a copy of the Program in
 return for a fee.
\end_layout

\begin_layout Verbatim

                     END OF TERMS AND CONDITIONS
\end_layout

\begin_layout Verbatim

            How to Apply These Terms to Your New Programs
\end_layout

\begin_layout Verbatim

  If you develop a new program, and you want it to be of the greatest possible
 use to the public, the best way to achieve this is to make it free software
 which everyone can redistribute and change under these terms.
\end_layout

\begin_layout Verbatim

  To do so, attach the following notices to the program.
  It is safest to attach them to the start of each source file to most effective
ly state the exclusion of warranty; and each file should have at least the
 "copyright" line and a pointer to where the full notice is found.
\end_layout

\begin_layout Verbatim

    <one line to give the program's name and a brief idea of what it does.>
     Copyright (C) <year>  <name of author>
\end_layout

\begin_layout Verbatim

    This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU Affero General Public License as published
 by     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.
\end_layout

\begin_layout Verbatim

    This program is distributed in the hope that it will be useful,    
 but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABIL
ITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the     GNU Affero General Public License for more details.
\end_layout

\begin_layout Verbatim

    You should have received a copy of the GNU Affero General Public License
     along with this program.
  If not, see <https://www.gnu.org/licenses/>.
\end_layout

\begin_layout Verbatim

Also add information on how to contact you by electronic and paper mail.
\end_layout

\begin_layout Verbatim

  If your software can interact with users remotely through a computer network,
 you should also make sure that it provides a way for users to get its source.
  For example, if your program is a web application, its interface could
 display a "Source" link that leads users to an archive of the code.
  There are many ways you could offer source, and different solutions will
 be better for different programs; see section 13 for the specific requirements.
\end_layout

\begin_layout Verbatim

  You should also get your employer (if you work as a programmer) or school,
 if any, to sign a "copyright disclaimer" for the program, if necessary.
 For more information on this, and how to apply and follow the GNU AGPL,
 see <https://www.gnu.org/licenses/>.
\end_layout

\begin_layout Chapter
Introduction to Music Production
\end_layout

\begin_layout Section
Audio terminology and standard workflow
\end_layout

\begin_layout Standard
Once a song is written and the performers know how to play it, the song
 is recorded.
 Typically, this is achieved by having the band play their parts while their
 instruments are recorded by a set of microphones.
 There is usually at least one microphone per "instrument", and several
 for the drum kit.
 Unless the engineer sums the outputs of the microphones before the conversion
 to digital (which might commit serious phase issues to "tape"; so it is
 never done), each microphone will record to one track of a multitrack recorder.
\end_layout

\begin_layout Standard
Historically, a multitrack recorder was literally a bank of reel-to-reel
 tape recorders, which were summed in the analog domain.
 This practice survives in a different form: the "multitrack metaphor" in
 the design of digital audio workstations.
 If the entire band is recorded as a single performance, then all the microphone
 inputs will be sent to distinct ADC's, which will convert the audio signals
 to a multichannel digital signal in a specially designed low-latency audio
 interface.
 (Basically, the audio interface is an audio input or output where a driver
 that circumvents the operating system's default driver is used.) Unless
 the engineer permanently sums the tracks in the digital domain, each track
 will be recorded to a separate uncompressed digital audio file.
\end_layout

\begin_layout Standard
Despite all the steps involved in this process, this can be easily done
 in real time.
 Actually, we often add real-time effect plugins to the tracks, and we also
 send the digital audio back out to the performers where, after an obligatory
 DAC, they use this audio to monitor their performance.
\end_layout

\begin_layout Standard
In short, audio tracks are recorded and converted to digital individually.
 These audio files are processed by either analog gear or digital plugins,
 then digitally summed with weights decided by the engineer.
 The process of preparing the tracks for summing and balancing the weights
 is called mixing.
 After mixing, the track is taken to a professional with nice analog gear
 and a deep understanding of audio for mastering, which prepares the final
 recording for distribution.
\end_layout

\begin_layout Standard
This is not some idealized, theoretical concept of audio production.
 In fact, this is the typical workflow of a modern budget studio.
 In the modern day, almost no information is lost from coversion between
 digital and analog, or vice versa, even in low end consumer devices.
 Basically, so long as it is "designed for audio," it is a safe bet that
 the ADCs and DACs are practically transparent.
 It would take a spectacularly incompetent engineer to release an audio
 output that sounds "digital" today.
\end_layout

\begin_layout Standard
For home studios and bedroom bands, the process is modified slightly.
 Because consumers typically lack the hardware and inputs to record an entire
 band, the band might take turns recording parts with one or two microphones
 or direct inputs.
 The first band member, typically the drummer, records to a click track,
 which ensures a consistent tempo.
 Then, each band member records on top of the previous musicians work in
 a new track.
\end_layout

\begin_layout Standard
Higher-end studios do use analog gear because they can afford to do so.
 However, the vast majority of processing will still be in the digital domain
 because, if used competently, digital systems can sound just as good as
 analog ones.
\end_layout

\begin_layout Standard
A particularly helpful example is the linear equalizer.
 Assuming a perfect performance and everything else is perfect, a real track
 needs, at the bare minimum, high-passes and low-passes to get rid of low-
 and high-frequency garbage and help separate the different instruments.
 Although nearly linear equalizers can be built in the analog domain, they
 are expensive and difficult to design.
 Digital linear equalizers are a dime a dozen, almost perfectly linear,
 and use trivial CPU.
 Crucially, an engineer can insert as many concurrent real-time instances
 of a digital EQ plugin as they desire.
 An analog equalizer will usually have two stereo inputs, so to use it on
 more than two tracks, an engineer needs to convert the tracks back to analog,
 play them through the equalizer, and rerecord and convert the tracks back
 into the digital domain.
 Although this process is not worth the effort for an equalizer, it can
 make good sense to rerecord guitar amps and vintage dynamics processors,
 especially if there is no plugin emulation for the particular analog element.
 Still, for analog gear that has a plugin counterpart, it is much easier
 to use the digital version.
 A common occurance is when an engineer is handed a vocal track recorded
 in an untreated room, and as a result has unwanted resonance corresponding
 to the room modes.
 A linear EQ is typically dialed in to provide a narrow cut at the resonant
 frequency.
 This preserves the character of the vocal track while removing the room
 mode.
 Then, the engineer can process the track further without having to worry
 about the room mode.
\end_layout

\begin_layout Standard
Except for a handful of purists, audio engineers will reach for whatever
 tool provides the best sound for the job.
 In high-end studios, there is just as much chance of the engineer reaching
 for a piece of analog gear as there is of the engineer adding a premium
 plugin to the channel strip in their DAW.
 It is in fact access to the latter that budget studios will often advertise
 as their selling point.
\end_layout

\begin_layout Standard
The reason why all this is relevant for my project is that in the early
 2000's, bands that could afford it began to use high-end laptops running
 mixing software as effect processors.
 For example, Periphery is a progressive metal band that inserts digital
 effects into their guitar signal chain to give their guitar sound an "electroni
c" timbre for small parts of the song.
 Because they do most of their effect processing digitally using the same
 signal chain as they used in the studio, their live performances sound
 very close to their albums.
\end_layout

\begin_layout Standard
My concept is to create a dedicated device to process guitar signals using
 existing audio plugins for live usage.
 One goal is to allow a musician to 
\begin_inset Quotes eld
\end_inset

drag-and-drop
\begin_inset Quotes erd
\end_inset

 their signal chain into my box and play through it in real time.
 Another is to create a platform where makers can write and test audio DSP
 algorithms in context with the rest of their hardware signal chain.
\end_layout

\begin_layout Section
Subjectivism in digital audio
\end_layout

\begin_layout Standard
The thesis of this section is that while my pedal should be able to produce
 
\begin_inset Quotes eld
\end_inset

correct
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

good-sounding
\begin_inset Quotes erd
\end_inset

 outputs in a way that can be emprically measured, there will always be
 a class of people who intrinsically reject digital audio technology and
 cannot be convinced (even with evidence) that my pedal can help them.
 
\end_layout

\begin_layout Standard
In philosophy, 
\emph on
subjectivism
\emph default
 is a group of related doctrines that view human knowledge in some field
 of endeavor as purely subjective, and that no objective truth about the
 field exists.
 The result is that an individual's subjective experience is valued over
 empirical evidence, possibly including that which contradicts an individual's
 beliefs.
 For example, an artistic subjectivist would view that there is no objective
 way to determine whether a piece of art is 
\begin_inset Quotes eld
\end_inset

good
\begin_inset Quotes erd
\end_inset

, and that the quality of art is only intrinsically determined by the viewer.
 This application of subjectivism is not controversial; in contrast, moral
 subjectivism has been the center of centuries of heated debate.
 Consequently, we cannot simply drop or accept subjectivism without some
 degree of consideration for the underlying field.
\end_layout

\begin_layout Standard
In the sciences, it is widely accepted that there exists some objective
 truth.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
At a bare minimum, there is something so common to all our experiences that
 it ought be treated as objective reality.
 For example, almost everyone knows that releasing an apple in the air will
 cause it to fall towards the ground.
 Therefore, the existence of gravity as a phenomenon is effectively an objective
 truth, although its mechanism is not understood by all people.
\end_layout

\end_inset

 Specifically, there are laws of physics, and they can be accurately described
 by Newton's laws and the associated mathematical equations.
 This is the position taken in this project: that audio phenomena can be
 objectively measured
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Whether or not the quality of a sound 
\emph on
as music
\emph default
 can be objectively measured is separate from measuring physical audio phenomena
, and irrelevant for the project.
\end_layout

\end_inset

.
 A consequence of this viewpoint is the rejection of the existence of audio
 phenomena that cannot possibly be measured or quantified
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
To be clear, whether or not an individual is personally competent enough
 to measure the phenonmenon is not what is being considered.
 It is whether a measurement instrument of suitable precision and a competent
 operator could verify that the phenomenon exists.
 Measurability is a necessary but insufficient quality for existence.
 For example, the 21 grams experiment 
\begin_inset Quotes eld
\end_inset

measured
\begin_inset Quotes erd
\end_inset

 the weight of the soul to be 21 grams, yet the sample size was too small
 to conclude anything about the value of the weight or the correlation between
 the weight differential and the existence of the soul.
 
\end_layout

\end_inset

 Unfortunately, a large subset of people, particularly those who are the
 most vocal about the importance of 
\begin_inset Quotes eld
\end_inset

quality
\begin_inset Quotes erd
\end_inset

 sound systems, are 
\emph on
audio subjectivists
\emph default
.
 Consequently, these people are inherently distrustful of scientifically
 minded people who might make measurements that invalidate their opinions.
\end_layout

\begin_layout Standard
The problem with audio subjectivism is that there actually are phenomena
 that are difficult (but not impossible) to measure with standard equipment.
 The human ear is a ridiculously sensitive instrument, and it can detect
 very small vibrations.
 The ear can detect very small nonlinearities in the frequency response
 of an otherwise linear audio system compared to other fields in signal
 processing.
 Musicians with their ear training make that instrument even more sensitive.
 They have probably been told several times that something they can clearly
 hear does not exist by someone who claims to be an authority figure or
 domain expert.
 How often is such an interaction followed by whipping out an SPL meter
 and checking that the sound exists? Rarely, if ever.
 The problem of debunking audio subjectivism is that the concerns of its
 adherents 
\emph on
are valid and likely based in reality.

\emph default
 Unfortunately, it might be a reality that is mathematically complicated
 or driven by a poorly understood mechanism.
\end_layout

\begin_layout Standard
The continued usage of analog music gear in place of digital implementations
 is one of the most important examples of audio subjectivism in the modern
 era.
 One of the reasons that analog gear has persisted amongst musicians is
 precisely because of the variability of analog parameters.
 Two nominally equivalent analog pedals might sound subtlely different.
 Consequently, there is a sense of uniqueness and individuality that comes
 with owning an analog pedal.
 For vacuum-tube-based gear, this is especially true, as vacuum-tube gear
 will audibly dull over the life of the tube, which can be noticed over
 a period of a few weeks of heavy usage.
 Quantifying the variability of these parameters is a difficult and subtle
 topic that is not of interest to most people.
 Through a misuse of Occam's razor, because the unmeasureable, intrinsic
 
\begin_inset Quotes eld
\end_inset

analog sound
\begin_inset Quotes erd
\end_inset

 seems just as reasonable to a musician unaquainted with electronics, 
\begin_inset Quotes eld
\end_inset

analog sound
\begin_inset Quotes erd
\end_inset

 is a simpler explanation and therefore the one worth adopting.
 For musicians this is mostly harmless, but audio designers must understand
 what makes analog gear sound good in order to compete with it.
\end_layout

\begin_layout Standard
For musicians who consider the authenticity of their analog gear to be a
 part of their art, no bit depth or sample frequency will ever be high enough
 to make the switch to digital worthwhile, because their pedal is metaphysically
 unique.
 Because of this, many musicians reject digital gear and cannot be convinced
 otherwise.
\end_layout

\begin_layout Standard
For musicians who can at least tolerate a part of their signal chain being
 digital, Shannon's sampling theorem provides most of the answer.
 For linear processing, sampling at 44.1kHz ensures that the entire audible
 range is captured with about 2kHz as a buffer.
 For nonlinear processing, digital oversampling can be (and usually is)
 used.
 This is usually baked into the particular audio plugin that needs it.
 For practical purposes, anything that can be done in the analog domain
 can be done in the digital domain without creating any artefacts, so long
 as the plugin designer is competent.
 (Really, we can achieve an arbitrarily good approximation, so good that
 the artefacts are inaudible.) This does not account for the idiosyncratic
 behavior of analog devices.
 These need to be added to digital audio systems manually if they are desired.
 
\end_layout

\begin_layout Standard
The issues arise for plugins that attempt to model specific pieces of analog
 gear.
 The problem is to optimally discretize a nonlinear circuit model.
 Although the problem is theoretically simple, the actual implementation
 requires the plugin designer to choose function approximations that yield
 good results around the operating point in the fastest possible time.
 Although the feasibility of analog modeling plugins is considered a solved
 problem, there is still a lot of research to be done in testing fast nonlinear
 approximations.
\end_layout

\begin_layout Standard
However, analog emulating plugin technology has come a long way.
 Even ten years ago, emulations of the major distortion pedals, amplifiers,
 and matched speaker cabinets were indistinguishable from their analog versions
 in the mix.
 This is still very much the case for the most popular plugins.
\end_layout

\begin_layout Standard
This is not a hypothetical scenario.
 All sorts of wild pseudoscience has cropped up around audio system design,
 particularly in the "audiophile" community where things like "passive preamps"
 are regularly sold to people supersitious about the intrinsic worth of
 analog electronics.
 The experiences of artists and consumers of art are based upon their subjective
 evaluations of the media they consume.
 As I have demonstrated above, it is not much of a stretch to think that
 audio systems design is also a subjective field, since it is adjacent to
 music.
 
\end_layout

\begin_layout Standard
Of course, as I hope to demonstrate, audio system design is mostly an objective
 field driven by data and physical princples.
 Objectively good electronic system design, combined with subjective decisions
 about the user interface and intentional "imperfections" in the signal
 chain, are the ingredients that yield a quality sound system.
\end_layout

\begin_layout Standard
In summation, for those who absolutely cannot tolerate a single piece of
 digital gear in their signal chain:
\end_layout

\begin_layout Quotation
"You can lead a horse to water, but you can't make it drink."
\end_layout

\begin_layout Standard
I hope to establish their trust in the future by releasing the code for
 this project and all my audio work as free and open-source software, to
 show them that there's nothing to hide.
 For everyone else, I hope my pedal serves as a useful tool.
\end_layout

\begin_layout Chapter
Introduction to Audio Plugins
\end_layout

\begin_layout Section
The purpose of the SimpleEQ plugin.
\end_layout

\begin_layout Standard
The SimpleEQ plugin was initially written as a way to pass the time while
 waiting for the ball to drop on New Years' Eve.
 The reason why I have brought it into the project is because it is a specific
 example of an audio plugin whose processing I fully and unambiguously understan
d, because I wrote it.
 This plugin really is the bare minimum that the system should be able to
 handle.
 It will serve as the first plugin to be tested.
 Because I have all the project files, and because I wrote it with the JUCE
 framework, it is a trivial matter to cross-compile the project for any
 target operating system and architecture.
\end_layout

\begin_layout Subsubsection
Principle of operation
\end_layout

\begin_layout Standard
Audio is processed in blocks that are determined by the plugin host.
 This sample block size can usually be set by the user, and it is made as
 small as the CPU can handle before the block size exceeds the amount of
 time it takes to process the block.
\end_layout

\begin_layout Standard
The DSP algorithm is a cascade of generic 2nd-order IIR Butterworth filters
 and a resonant peak.
 The Butterworth filters are 
\begin_inset Quotes eld
\end_inset

low cut
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

high cut
\begin_inset Quotes erd
\end_inset

 (high-pass and low-pass respectively
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
In audio, the 
\begin_inset Quotes eld
\end_inset

cut
\begin_inset Quotes erd
\end_inset

 terminology is typically preferred because that is why an audio mixing
 engineer typically applies a high/low-pass filter: to remove or 
\begin_inset Quotes eld
\end_inset

cut out
\begin_inset Quotes erd
\end_inset

 low frequencies.
 In this section, the 
\begin_inset Quotes eld
\end_inset

cut
\begin_inset Quotes erd
\end_inset

 terminology will be used, but in the rest of the UE-DEP project, the 
\begin_inset Quotes eld
\end_inset

pass
\begin_inset Quotes erd
\end_inset

 terminology is used.
\end_layout

\end_inset

).
 The plugin generates filter coefficients based on the frequency and steepness
 settings stored in the plugin's state, and it transforms one set of coefficient
s to the corresponding low-cut coefficients.
 The resonant peak is generated based on the frequency, gain, and Q parameters
 stored in the plugin's state.
 The plugin convolves an audio buffer with each filter response in cascade.
\end_layout

\begin_layout Standard
While this occurs, the GUI operates on a separate thread.
 The GUI looks for changes to its parameters, then sends any changes to
 the plugin's state.
 The new state will take effect when the next audio buffer is processed.
 The plugin host can also change parameters through 
\emph on
automation
\emph default
 if the user so chooses.
 For example, the gain of the peak filter can be set to respond to the amplitude
 of the audio signal.
\end_layout

\begin_layout Standard
The program structure, where audio processing and user control are handled
 by different threads and communicate through an external plugin state,
 is common to almost all plugins in all formats.
 Any plugin written with the JUCE framework begins with an automatically
 generate template of this structure.
 Consequently, these are the functions a plugin host, and consequently my
 hardware platform, needs to be capable of supporting.
\end_layout

\begin_layout Section
What exactly is a 
\emph on
VST
\emph default
 Plugin?
\end_layout

\begin_layout Standard
[Explain]
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
According to Wikipedia:
\end_layout

\begin_layout Quotation
\begin_inset Quotes eld
\end_inset

A simulation is the imitation of the operation of a real-world process or
 system over time
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
An audio plugin is not 
\emph on
intrinsically
\emph default
 a simulation.
 This fact is the principle that drives this project.
 For example, the SimpleEQ plugin is not a simulation of an equalizer; it
 
\emph on
is
\emph default
 an equalizer.
 Running a piece of audio through this pedal will affect the frequency response
 according to the indicated filter characteristic.
 The only practical difference between using the plugin with ADC and DAC
 and using an (ideal) analog equalizer with the same transfer function is
 that the digital one introduces a time delay of 
\begin_inset Formula $2^{N}$
\end_inset

 samples.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $2^{N}$
\end_inset

 represents the size of the audio buffer in samples.
 Practically, the audio buffer is chosen to be as small as the CPU can handle.
 It is set by the plugin host.
 Other plugins can introduce their own latency depending on their programming,
 but the latency caused by the audio buffer is only applied once.
 Typical values are between 16 and 1024 samples.
 For a 48kHz sample rate, it is not advised to use a buffer larger than
 48 samples 
\begin_inset Formula $\left(=48\text{k}\frac{\text{samples}}{\text{s}}\times1\text{ms}\right)$
\end_inset

if the CPU allows, although guitarists can typically put up with slightly
 higher values than musicians who play other instruments.
\end_layout

\end_inset

 The memory locations the plugin host assigns 
\emph on
are
\emph default
 where the process of mixing music and modifying audio data actually occurs.
\end_layout

\begin_layout Standard
That being said, 
\emph on
many
\emph default
 audio plugins are simulations of some piece of analog gear.
 For example, the TSE808 plugin is a model of a specific Tube Screamer pedal.
 Most of the plugins I use are models of specific pieces of analog gear.
 However, this is not the case for all plugins.
 As a counterexample, all the filters in SimpleEQ are discrete-time IIR
 versions of the 2nd order Butterworth transfer function.
 These filters could be realized in the analog domain by designing Butterworth
 filters using a filter coefficient table and cascading the indivdual filter
 sections, but 
\emph on
this plugin was not derived from an already existing analog circuit
\emph default
.
 The goal was to implement the discrete time filter in the digital domain.
 Still, the frequency responses and nonlinear system functions of analog
 gear still provide inspiration for plugin algorithms because these are
 the sounds to which listeners have been acclimated.
\end_layout

\begin_layout Chapter
Operating Systems and How They Affect This Design
\end_layout

\begin_layout Standard
This appendix is a vast oversimplification of how the existence of several
 operating systems influenced the design of the system.
 The facts are recounted in broad terms as they are relevant to the project.
\end_layout

\begin_layout Standard
The operating system is a piece of software that manages other applications
 and provides common services for them.
 Examples of operating systems include Windows 10, Mac OS X, Debian, and
 Raspberry Pi OS.
 A crucial component of any operating system is its 
\emph on
kernel
\emph default
, which manages low-level tasks.
 For example, the common element amongst all GNU/Linux operating systems
 is their dependence on a version of the Linux kernel.
 For this reason, different Linux-based operating systems are often called
 distributions.
 For example, Raspberry Pi OS is a modified Debian distribution.
\end_layout

\begin_layout Section
The relation between Operating Systems and Processor Architectures
\end_layout

\begin_layout Standard
There are many processor architectures, but the ones that are important
 for this project are x86, x64, and ARM64.
 x64 is the 
\begin_inset Quotes eld
\end_inset

typical
\begin_inset Quotes erd
\end_inset

 architecture for 64-bit desktop computers using Intel or AMD CPUs.
 x86 is the older 32-bit version of the Intel/AMD architecture.
 ARM64 is the 64-bit version of the ARM architecture typical of mobile and
 embedded devices.
\end_layout

\begin_layout Standard
GNU/Linux is the term for the group of FOSS operating systems that use the
 Linux kernel.
 For the purpose of audio work, the source code of a 
\begin_inset Quotes eld
\end_inset

Linux
\begin_inset Quotes erd
\end_inset

 plugin will compile on any GNU/Linux OS so long as all its dependencies
 are installed.
 However, depending on the complexity of the plugin, pre-compiled binaries
 might not work for all Linux systems.
 In that case, developers will typically release a bunch of binaries compiled
 for the 
\begin_inset Quotes eld
\end_inset

mainstream
\begin_inset Quotes erd
\end_inset

 Linux-based operating systems.
 People using specialized GNU/Linux distributions can often get away with
 using the mainstream binaries if their distribution was forked from one
 of the main ones.
 (For example, Debian binaries will usually run on RPi OS because RPi OS
 was forked from Debian).
 It is up to each developer of a GNU/Linux operating system to release separate
 binaries of their operating system for each processor architecture they
 wish to support.
 In the case of RPi OS, the OS is available for x86, x64, and ARM64 architecture
s, as well as 32-bit ARM.
\end_layout

\begin_layout Standard
Windows is a proprietary, closed source operating system.
 Most versions of Windows can be built for x86 and x64 architectures.
 Special versions of Windows exist for ARM architectures, but these are
 never used for audio work.
 For the purposes of this project, Windows software can be built for either
 the x86 or x64 architectures.
\end_layout

\begin_layout Standard
For the highest-end studios, Mac OS X is the operating system of choice
 because of its integration with ProTools and other Avid products, and the
 status that can be broadcasted by owning an expensive Apple computer.
 However, for even remotely budget-conscious studios that typically cannot
 afford Avid and Apple products, Windows is the operating system of choice
 for audio production.
 (Anecdotally, it is currently my choice for audio production.) Although
 it is the absolute worst OS for low-latency audio work out of the box,
 most manufacturers supply Windows drivers to circumvent the OS's native
 audio manager.
 Additionally, most audio programs (including ProTools) support Windows
 systems.
 Most people use Windows on their office and gaming computers anyway, so
 the transition to their audio PC is more seamless.
\end_layout

\begin_layout Section
Raspberry Pi 4 is ARM64-based
\end_layout

\begin_layout Verse
The Raspberry Pi 4 has a CPU with an 
\emph on
ARM64
\emph default
 processor architecture.
\end_layout

\begin_layout Standard

\series bold
The importance of this fact cannot be understated.

\series default
 The reason why the RPi 4 was chosen was because it has excellent documentation,
 it is accessible for makers and musicians, and because it has 8GB of RAM
 and a fast processor.
 I could not find a comparable x86 microcomputer with a similar amount of
 RAM or comparable processor.
 In order to support the vast majority of audio plugins, there needs to
 be 
\emph on
software
\emph default
 support for x86 and x64
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
64-bit support is prioritized over 32-bit support because 32-bit operating
 systems are going the way of the dinosaur.
 Many plugin developers have stopped releasing 32-bit binaries for their
 plugins altogether.
\end_layout

\end_inset

 system calls.
 
\end_layout

\begin_layout Standard
When I graduated from recording school (2016), professional audio on Linux
 was simply impractical.
 Our curriculum included no mention of Linux.
 The main issue with audio on Linux at that time was a lack of audio programs
 comparable to those available for Windows and OS X.
 Even back then, the problem of latency was mostly solved at the system
 level with the integration of ALSA into Linux and the development of JACK
 for low-latency audio routing.
 WINE did exist and had decent support for modern video games and office
 applications, but the technology was not quite ready for pro audio.
\end_layout

\begin_layout Standard
Windows emulation has come a very long way since then.
 As if to demonstrate to the world how far such emulation had come, in 2020
 the Valve Corporation released a game console based around a heavily modified
 distribution of Arch Linux.
 This is aimed at mainstream consumers looking to play games 
\emph on
developed for PC
\emph default
 on a Windows system.
 So far, the system has been quite successful.
 It demonstrates that real-time operations comparable to those expected
 of a powerful desktop PC are possible on Linux.
\end_layout

\begin_layout Standard
For this project, the important development is the release of the Carla
 plugin host.
 Carla can be built with bridges to WINE and x86/64 emulators to allow the
 host to use plugins compiled for Windows.
\end_layout

\begin_layout Section
How Computer Programs Work
\end_layout

\begin_layout Standard
The workflow to implement a computer program is as follows:
\end_layout

\begin_layout Enumerate
Write the code in a programming language as a text file.
 
\end_layout

\begin_layout Enumerate
Compile the source code into assembly language.
\end_layout

\begin_layout Enumerate
Link together assembly code and libraries into an executable.
 
\end_layout

\begin_layout Standard
The assembly language in Step 2 depends on the processor's instruction set
 architecture.
 Step 1 could be dependent on the operating system if the programmer uses
 APIs that are unique to a platform.
 Steps 2 and 3 are usually abstracted away by the IDE, which is preconfigured
 by default to compile for the host operating system.
\end_layout

\begin_layout Standard
An audio plugin is a compiled binary file with functions that are called
 by the audio host as they are needed.
 Because the binary file is compiled for a target platform, all plugin binaries
 are at least restricted to run on the processor architecture for which
 the programmer chose to compile it.
 Usually, x86 and x64 versions of plugins are offered as precompiled binaries.
 Because the plugin contains GUI data, the compliled plugins usually rely
 on operating-system specific API calls unless a unifying framework like
 JUCE is used.
 (Even when using JUCE, the plugin needs to specifically compiled for each
 target platform, although there usually are no meaningful changes to the
 source code.
 The change is in the linked libraries provided by JUCE.) JUCE is increasingly
 adopted by audio developers.
\end_layout

\begin_layout Section
The Approach for Supporting Audio Plugins
\end_layout

\begin_layout Standard
The support of audio plugins is the same as support for software in general,
 so I will discuss the topic in general terms.
\end_layout

\begin_layout Standard
Consequently, there are eight possible classes of software to support:
\end_layout

\begin_layout Enumerate
Compiled for ARM 
\end_layout

\begin_deeper
\begin_layout Enumerate
64-bit 
\end_layout

\begin_deeper
\begin_layout Enumerate
Windows (unheard of) 
\end_layout

\begin_layout Enumerate
GNU Linux (Raspberry Pi) 
\end_layout

\end_deeper
\begin_layout Enumerate
32-bit 
\end_layout

\begin_deeper
\begin_layout Enumerate
Windows (unheard of) 
\end_layout

\begin_layout Enumerate
GNU Linux (Raspberry Pi w/ 32-bit OS) 
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Compiled for Intel/AMD
\end_layout

\begin_deeper
\begin_layout Enumerate
64-bit
\end_layout

\begin_deeper
\begin_layout Enumerate
Windows (most common) 
\end_layout

\begin_layout Enumerate
GNU Linux (rare but increasing) 
\end_layout

\end_deeper
\begin_layout Enumerate
32-bit 
\end_layout

\begin_deeper
\begin_layout Enumerate
Windows (common in the past) 
\end_layout

\begin_layout Enumerate
GNU Linux (rare, unlikely for new plugins)
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
The easiest class to support is ARM64-GNU Linux.
 This includes plugins compiled for Raspberry Pi directly.
 32-bit ARM binaries are supported on 64-bit Raspberry Pi OS.
 Regardless, I am not aware of any plugin manufacturer who actually releases
 ARM binaries.
\end_layout

\begin_layout Standard
Next, we have the two classes of 32- and 64-bit "Intel" architectures with
 a GNU Linux target OS.
 These are currently supported.
 This is accomplished by the box86 and box64 libraries that translate x86
 and x64 system calls (respectively) into ARM.
 Carla is aware of these libraries, and consequently can load plugins compiled
 for GNU Linux in any architecture.
\end_layout

\begin_layout Standard
Support for 32-bit Windows plugins has been suboptimally implemented by
 installing a 32-bit Windows plugin host with ASIO drivers that runs in
 WINE.
 However, my goal is to compile Carla with the Windows plugin bridges.
 These would fully support x86 and x64 Windows plugins.
 Contingency plans for the various types of plugins are detailed in the
 Plan section.
\end_layout

\begin_layout Standard
At a bare minimum, the pedal can currently run GNU Linux plugins compiled
 for any "mainstream" target architecture.
 This opens the door for a variety of FOSS plugins.
 Paid and proprietary plugins are typically released for Windows.
\end_layout

\begin_layout Standard
The focus will be on implementing VST-formatted plugins.
 This is the most common format, and it is the format-du-jeur of consumer-grade
 (and consumer-priced) audio plugins.
 If Carla is used, it will be easy to support the FOSS plugin formats for
 GNU Linux.
\end_layout

\begin_layout Standard
I have no intent to support AAX plugins because developers need to pay Avid
 for the rights to develop software in their format.
 Every other plugin format is free to develop.
 Frankly, I have no use for AAX-only plugins as a musician or audio developer,
 and I advise that audio engineers avoid AAX-only plugins for any purpose.
\end_layout

\begin_layout Chapter
Git, GitHub, Version Control, and their Role in Maintaining This Project
\end_layout

\begin_layout Standard
Very briefly, my project will be hosted on GitHub.
 Project progress can be monitored by checking through the edit history
 of the 
\begin_inset CommandInset href
LatexCommand href
name "project's GitHub repository."
target "https://github.com/gg232/UE-DEP"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
This Appendix is included so I can discuss Git concepts clearly with my
 adviser or anyone else interested in my project.
\end_layout

\begin_layout Section
An explanation of Git
\end_layout

\begin_layout Standard

\emph on
Version control
\emph default
 software is a tool that tracks the changes to a group of files.
 For example, if a programmer adds code to a project that breaks the project,
 then saves the project and publishes it to the internet, then the project
 will be broken.
 To fix the error, the programmer has to look through the source code of
 the project and remove the error directly.
 For complex projects, it might not be obvious which code was broken.
 If several programmers are involved in the project, it will be difficult
 to point out how one programmer changed the project.
\end_layout

\begin_layout Standard

\emph on
Git
\emph default
 is the most popular version control software.
 It is available for practically any modern operating system.
 Git works by tracking the changes to files and subdirectories within a
 directory
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
On Windows systems, a directory is usually called a 
\emph on
folder
\emph default
, and a subdirectory is called a 
\emph on
subfolder
\emph default
.
\end_layout

\end_inset

 by using a 
\emph on
tree
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
In graph theory, a tree is a minimal set of branches such that, by traversing
 only the branches in the tree, all nodes in the graph can be reached.
 Basically, Git implements this graph, and allows the user to traverse the
 graph by either committing data or reverting previous commits (undo).
\end_layout

\end_inset


\emph default
 representation.
 Because source code files are typically plain text files with unique file
 extensions, Git can track the changes in source code files and other compressed
 text files.
 It cannot track changes in binaries such as executables, .docx files, and
 .png files, but it can tell if changes have been made, and it can revert
 those files back to their previously saved versions.
 Source files (or anything a programmer wants Git to track) are typically
 saved to online 
\emph on
repositories
\emph default
 (or 
\emph on
repo
\emph default
 for short).
 
\end_layout

\begin_layout Standard
To compile a program from source, the first step is typically to clone the
 Git repository, or copy the files and subdirectory
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A subdirectory (relative to a parent directory) is a directory contained
 within another directory.
\end_layout

\end_inset

 structure to a local directory of choice.
\end_layout

\begin_layout Standard

\emph on
GitHub
\emph default
 is Microsoft's online repository host.
 Whenever the source code of a project is released online, the code actually
 resides on the servers owned by the repository host (in this project's
 case, GitHub).
 GitHub is a searchable website where most Git features are available for
 viewing.
\end_layout

\begin_layout Standard
To edit a Git repository hosted on GitHub, a programmer fetches the repo
 from GitHub, then works on the contents of the repo on their local machine.
 Once the programmer is ready to commit a change to the online repository,
 it is pushed to GitHub using a unique security code so that only people
 who are allowed to change the repo can do so.
\end_layout

\begin_layout Standard
Because Git stores a tree structure, a programmer can create a branch within
 the original project and work on it independently from the main branch.
 This allows a programmer to make drastic, possibly program-breaking changes
 in their branch without affecting the main branch.
 Practically, this is leveraged by programmers who designate a 
\begin_inset Quotes eld
\end_inset

main
\begin_inset Quotes erd
\end_inset

 branch as the most important or 
\begin_inset Quotes eld
\end_inset

outward facing
\begin_inset Quotes erd
\end_inset

 branch that people can use, and a developement branch (or several) where
 changes can be implemented.
 Once a development branch is debugged to work, it can be 
\emph on
merged
\emph default
 back into the main branch through Git's merge command.
 This allows the programmer to see the changes and where they occur, and
 to approve or reject individual changes.
\end_layout

\begin_layout Section
What files can be managed by Git?
\end_layout

\begin_layout Standard
For any text file with any file extension (or none), the creation of, changes
 within, and deletion of files can be fully tracked.
 This is why the original versions of all documents are written in \SpecialChar LyX

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\SpecialChar LyX
 is a 
\begin_inset Quotes eld
\end_inset

manuscript editor
\begin_inset Quotes erd
\end_inset

 that generates \SpecialChar LaTeX
 code in a 
\begin_inset Quotes eld
\end_inset

friendlier
\begin_inset Quotes erd
\end_inset

 environment resembling a standard word processor.
\end_layout

\end_inset

: .lyx files are uncompressed text files, so all changes can be tracked with
 Git.
 These files can be easily converted to .tex, .docx, or .odt.
\end_layout

\begin_layout Standard
For any other file (e.g.
 a compressed binary, or just 
\begin_inset Quotes eld
\end_inset

binary
\begin_inset Quotes erd
\end_inset

 for short), Git can track if the file was changed, and what was its binary
 content for the last commit.
 Practically, this means that versions of binaries can be stored, but that
 it cannot tell the programmer exactly which lines were changed.
 Individual changes can not be approved or rejected, but the programmer
 can still choose to accept the changed binary or revert to the old version.
\end_layout

\begin_layout Standard
Explicitly, the following file types are compiled binaries:
\end_layout

\begin_layout Itemize
KiCad files
\end_layout

\begin_layout Itemize
Multisim files
\end_layout

\begin_layout Itemize
Word documents (.docx)
\end_layout

\begin_layout Itemize
Open Document Type documents (.odt)
\end_layout

\begin_layout Standard
The following file types are plain text files who changes can be fully tracked:
\end_layout

\begin_layout Itemize
Ordinary text files (.txt)
\end_layout

\begin_layout Itemize
GitHub markdown files (.md)
\end_layout

\begin_layout Itemize
LyX documents (.lyx)
\end_layout

\begin_layout Itemize
\SpecialChar TeX
 and \SpecialChar LaTeX
 documents (.tex)
\end_layout

\begin_layout Itemize
Executables
\end_layout

\begin_layout Itemize
Dynamic linked libraries (.dll's)
\end_layout

\begin_layout Subsection
What files can be hosted on GitHub?
\end_layout

\begin_layout Standard
GitHub can host any file that Git can track with one crucial exception:
 files must be 
\emph on
under 100MB
\emph default
 for users who have not paid for large file storage.
 Basically, hosted files should be small.
 There is no stated size limitation for entire repos, but GitHub support
 suggests that they stay under 1GB total size.
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
I will be using GitHub to disclose my progress, release the project files,
 and documentation to the public, and 
\emph on
maintain a history of my changes.
\end_layout

\begin_layout Standard
The typical workflow for the project will be to fetch the copy onto whatever
 computer I happen to be using, then create a local WIP (work in progress)
 branch.
 All new work will take place on this branch.
 If I need to interrupt my work or switch computers, the local WIP branch
 will be pushed to the GitHub repo.
 When the WIP branch has reached a point that I am comfortable committing
 the changes permanently, the WIP branch will be merged into the main branch.
\end_layout

\begin_layout Standard
The GitHub repo for this file is located at the following 
\begin_inset CommandInset href
LatexCommand href
name "hyperlink"
target "https://github.com/gg232/UE-DEP"
literal "false"

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
In case the hyperlink is broken: https://github.com/gg232/UE-DEP
\end_layout

\end_inset

.
 All code and documentation that I can host will be posted here.
\end_layout

\begin_layout Standard
Note that, as of the writing of this document, the repo is set to 
\emph on
private
\emph default
.
 This means that it will not show up if searched for with GitHub's search
 bar.
 It can be accessed if you have a link to the URL (provided in several locations
 above in this document).
 
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "bibliography"
options "bibtotoc,IEEEtran"

\end_inset


\end_layout

\end_body
\end_document
